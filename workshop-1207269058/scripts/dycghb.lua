local _p19o = require "widgets/widget" local _bqgx = require "widgets/image" local _8UuS = require "widgets/text" local _G7gV = function(_OGKa, _NxCi, _YvFW, _H7ZF) return {r = _OGKa or 0x1, g = _NxCi or 0x1, b = _YvFW or 0x1, a = _H7ZF or 0x1, Get = function(_gr0T) return _gr0T.r, _gr0T.g, _gr0T.b, _gr0T.a end, Set = function(_3xKq, _vPi4, _KAEl, _BCf3, _UfE1) _3xKq.r = _vPi4 or 0x1; _3xKq.g = _KAEl or 0x1; _3xKq.b = _BCf3 or 0x1; _3xKq.a = _UfE1 or 0x1; end, } end local _z0zQ = function(_Uu0a) return math.min(math.max(_Uu0a, 0x0), 0x1) end local _5ZLp = function(_hx1r, _5tP8, _oHIx) return _hx1r + (_5tP8 - _hx1r) * _oHIx end local _1uue = function(_16Va, _X8tc) for _74Ga, _Zh9U in pairs(_16Va) do if _Zh9U == _X8tc then return true end end return false end local _Zoee = function(_LY7A, _AFM2) if not _1uue(_LY7A, _AFM2) then table.insert(_LY7A, _AFM2) end end local _scYz = function(_9Vi8, _eKCi) for _dZtb, _XOih in pairs(_9Vi8) do if _XOih == _eKCi then return _dZtb end end end local _IXIM = function(_pqDd, _9uKr) local _vBT5 = _scYz(_pqDd, _9uKr) if _vBT5 then table.remove(_pqDd, _vBT5) end end local _fgbd = Class(_p19o, function(_8aQo, _W5aV) _p19o._ctor(_8aQo, "DYC_SlicedImage" ) _8aQo.images = {} _8aQo.mode = "slice13" _8aQo.texScale = _W5aV.texScale or 0x1 _8aQo.width = 0x64 _8aQo.height = 0x64 _8aQo:SetTextures(_W5aV) end) function _fgbd:__tostring() return string.format( "%s (%s)" , self.name, self.mode) end function _fgbd:SetTextures(_E5MV) assert(_E5MV.mode) self.images = {} self.mode = _E5MV.mode if self.mode == "slice13" or self.mode == "slice31" then local _xFtF = nil _xFtF = self:AddChild(_bqgx(_E5MV.atlas, _E5MV.texname.."_1.tex" )) _xFtF.oriW, _xFtF.oriH = _xFtF:GetSize() _xFtF.imgPos = 0x1 self.images[0x1] = _xFtF _xFtF = self:AddChild(_bqgx(_E5MV.atlas, _E5MV.texname.."_2.tex" )) _xFtF.oriW, _xFtF.oriH = _xFtF:GetSize() _xFtF.imgPos = 0x2 self.images[0x2] = _xFtF _xFtF = self:AddChild(_bqgx(_E5MV.atlas, _E5MV.texname.."_3.tex" )) _xFtF.oriW, _xFtF.oriH = _xFtF:GetSize() _xFtF.imgPos = 0x3 self.images[0x3] = _xFtF if self.mode == "slice13" then assert(self.images[0x1].oriH == self.images[0x3].oriH, "Height must be equal!" ) assert(self.images[0x1].oriH == self.images[0x2].oriH, "Height must be equal!" ) else assert(self.images[0x1].oriW == self.images[0x3].oriW, "Width must be equal!" ) assert(self.images[0x1].oriW == self.images[0x2].oriW, "Width must be equal!" ) end return elseif self.mode == "slice33" then local _DmjT = nil for _sf9T = 0x1, 0x3 do for _9lXL = 0x1, 0x3 do _DmjT = self:AddChild(_bqgx(_E5MV.atlas, _E5MV.texname.."_".._sf9T.._9lXL..".tex" )) _DmjT.oriW, _DmjT.oriH = _DmjT:GetSize() _DmjT.imgPos = _sf9T * 0xa + _9lXL self.images[_sf9T * 0xa + _9lXL] = _DmjT if _sf9T > 0x1 then assert(self.images[_sf9T * 0xa + _9lXL].oriW == self.images[(_sf9T - 0x1) * 0xa + _9lXL].oriW, "Width must be equal!" ) end if _9lXL > 0x1 then assert(self.images[_sf9T * 0xa + _9lXL].oriH == self.images[_sf9T * 0xa + _9lXL - 0x1].oriH, "Height must be equal!" ) end end end return end error( "Mode not supported!" ) self:SetSize() end function _fgbd:SetSize(_fx6R, _NejH) _fx6R = _fx6R or self.width _NejH = _NejH or self.height if self.mode == "slice13" then local _gt0u = self.images[0x1] local _pRId = self.images[0x2] local _SY30 = self.images[0x3] local _hoC2 = math.min(self.texScale, math.min(_fx6R / (_gt0u.oriW + _SY30.oriW), _NejH / _gt0u.oriH)) local _6rU2 = _gt0u.oriW * _hoC2 local _b6oL = _SY30.oriW * _hoC2 local _izPh = math.max(0x0, _fx6R - _6rU2 - _b6oL) _gt0u:SetSize(_6rU2, _NejH) _pRId:SetSize(_izPh, _NejH) _SY30:SetSize(_b6oL, _NejH) local _84is = (_6rU2 - _b6oL) / 0x2 local _wWyj = - _6rU2 / 0x2 - _izPh / 0x2 + _84is local _vZEL = _b6oL / 0x2 + _izPh / 0x2 + _84is _gt0u:SetPosition(_wWyj, 0x0, 0x0) _pRId:SetPosition(_84is, 0x0, 0x0) _SY30:SetPosition(_vZEL, 0x0, 0x0) self.width = _6rU2 + _izPh + _b6oL self.height = _NejH elseif self.mode == "slice31" then local _G5bl = self.images[0x1] local _r6E1 = self.images[0x2] local _5dVw = self.images[0x3] local _uqGj = math.min(self.texScale, math.min(_NejH / (_G5bl.oriH + _5dVw.oriH), _fx6R / _G5bl.oriW)) local _fpl0 = _G5bl.oriH * _uqGj local _bBfX = _5dVw.oriH * _uqGj local _QLEv = math.max(0x0, _NejH - _fpl0 - _bBfX) _G5bl:SetSize(_fx6R, _fpl0) _r6E1:SetSize(_fx6R, _QLEv) _5dVw:SetSize(_fx6R, _bBfX) local _ZsHg = (_fpl0 - _bBfX) / 0x2 local _Wjwf = - _fpl0 / 0x2 - _QLEv / 0x2 + _ZsHg local _5dul = _bBfX / 0x2 + _QLEv / 0x2 + _ZsHg _G5bl:SetPosition(0x0, _Wjwf, 0x0) _r6E1:SetPosition(0x0, _ZsHg, 0x0) _5dVw:SetPosition(0x0, _5dul, 0x0) self.height = _fpl0 + _QLEv + _bBfX self.width = _fx6R elseif self.mode == "slice33" then local _5Yl4 = self.images local _jW8g = math.min(self.texScale, math.min(_fx6R / (_5Yl4[0xb].oriW + _5Yl4[0xd].oriW), _NejH / (_5Yl4[0xb].oriH + _5Yl4[0x1f].oriH))) local _qpeg, hs, xs, ys = {}, {}, {}, {} _qpeg[0x1] = _5Yl4[0xb].oriW * _jW8g _qpeg[0x3] = _5Yl4[0xd].oriW * _jW8g _qpeg[0x2] = math.max(0x0, _fx6R - _qpeg[0x1] - _qpeg[0x3]) hs[0x1] = _5Yl4[0xb].oriH * _jW8g hs[0x3] = _5Yl4[0x1f].oriH * _jW8g hs[0x2] = math.max(0x0, _NejH - hs[0x1] - hs[0x3]) xs[0x2] = (_qpeg[0x1] - _qpeg[0x3]) / 0x2 xs[0x1] = - _qpeg[0x1] / 0x2 - _qpeg[0x2] / 0x2 + xs[0x2] xs[0x3] = _qpeg[0x3] / 0x2 + _qpeg[0x2] / 0x2 + xs[0x2] ys[0x2] = (hs[0x1] - hs[0x3]) / 0x2 ys[0x1] = - hs[0x1] / 0x2 - hs[0x2] / 0x2 + ys[0x2] ys[0x3] = hs[0x3] / 0x2 + hs[0x2] / 0x2 + ys[0x2] for _OOJf = 0x1, 0x3 do for _0nEP = 0x1, 0x3 do _5Yl4[_OOJf * 0xa + _0nEP]:SetSize(_qpeg[_0nEP], hs[_OOJf]) _5Yl4[_OOJf * 0xa + _0nEP]:SetPosition(xs[_0nEP], ys[_OOJf], 0x0) end end self.width = _qpeg[0x1] + _qpeg[0x2] + _qpeg[0x3] self.height = hs[0x1] + hs[0x2] + hs[0x3] end end function _fgbd:GetSize() return self.width, self.height end function _fgbd:SetTint(_CicN, _GOJk, _3Aob, _594n) for _qkN4, _NxfK in pairs(self.images) do _NxfK:SetTint(_CicN, _GOJk, _3Aob, _594n) end end function _fgbd:SetClickable(_nBCi) for _JqpS, _JOTW in pairs(self.images) do _JOTW:SetClickable(_nBCi) end end local _VHxF = Class(_p19o, function(_mXmZ, _adkO) _p19o._ctor(_mXmZ, "DYC_TextHealthbar" ) _mXmZ.text = _mXmZ:AddChild(_8UuS(NUMBERFONT, 0x14, "" )) _mXmZ.c1 = _adkO.c1 or "=" _mXmZ.c2 = _adkO.c2 or "#" _mXmZ.cnum = _adkO.cnum or 0xa _mXmZ.numCoeff = _adkO.numCoeff or 0x1 _mXmZ.percentage = 0x1 _mXmZ.fontSize = _adkO.fontSize or 0x14 _mXmZ.hbScale = _adkO.hbScale or 0x1 _mXmZ:SetPercentage() _mXmZ:SetHBScale() if _adkO.color then _mXmZ:SetTextColor(_adkO.color) end end) function _VHxF:SetStrings(_TwZP, _JKce, _dCzf) _TwZP = _TwZP or self.c1; _JKce = _JKce or self.c2; _dCzf = _dCzf or self.cnum; _dCzf = math.max(0x1, _dCzf) self.c1 = _TwZP; self.c2 = _JKce; self.cnum = _dCzf; self:SetPercentage() end function _VHxF:SetLength(_mBKN) _mBKN = _mBKN or self.cnum self.cnum = _mBKN self:SetPercentage() end function _VHxF:SetPercentage(_lFCq) _lFCq = _lFCq or self.percentage _lFCq = math.max(0x0, math.min(_lFCq, 0x1)) self.percentage = _lFCq local _qiBS = self.c1 local _WiRZ = self.c2 local _lpJk = self.cnum * self.numCoeff local _qYyn = "" for _BJi8 = 0x1, _lpJk do if _lFCq == 0x0 or (_BJi8 ~= 0x1 and _BJi8 * 1.0 / _lpJk > _lFCq) then _qYyn = _qYyn.._qiBS else _qYyn = _qYyn.._WiRZ end end self.text:SetString(_qYyn) end function _VHxF:SetFontSize(_MOTt) _MOTt = _MOTt or self.fontSize self.fontSize = _MOTt self.text:SetSize(self.fontSize * self.hbScale) end function _VHxF:SetHBScale(_istV) _istV = _istV or self.hbScale self.hbScale = _istV self:SetFontSize() end function _VHxF:SetColor(_nIOE, _K3xL, _4h2B, _3m3X) _nIOE = _nIOE or 0x1 _K3xL = _K3xL or 0x1 _4h2B = _4h2B or 0x1 _3m3X = _3m3X or 0x1 if type(_nIOE) == "table" then _nIOE.r = _nIOE.r or _nIOE.x or _nIOE[0x1] or 0x1 _nIOE.g = _nIOE.g or _nIOE.y or _nIOE[0x2] or 0x1 _nIOE.b = _nIOE.b or _nIOE.z or _nIOE[0x3] or 0x1 _nIOE.a = _nIOE.a or _nIOE[0x1] or 0x1 self.text:SetColour(_nIOE.r, _nIOE.g, _nIOE.b, _nIOE.a) else self.text:SetColour(_nIOE, _K3xL, _4h2B, _3m3X) end end local _3pZx = Class(_p19o, function(_cwmL, _xDOM) _p19o._ctor(_cwmL, "DYC_GraphicHealthbar" ) _cwmL:SetScaleMode(_xDOM.isDemo and SCALEMODE_NONE or SCALEMODE_PROPORTIONAL) _cwmL:SetMaxPropUpscale(0x3e7) _cwmL.worldOffset = Vector3(0x0, 0x0, 0x0) _cwmL.screen_offset = Vector3(0x0, 0x0, 0x0) _cwmL.isDemo = _xDOM.isDemo _cwmL.bg = _cwmL:AddChild(_bqgx(_xDOM.basic.atlas, _xDOM.basic.texture)) _cwmL.bg:SetClickable(_cwmL.isDemo or false) _cwmL.bg2 = _cwmL:AddChild(_bqgx(_xDOM.basic.atlas, _xDOM.basic.texture)) _cwmL.bg2:SetClickable(_cwmL.isDemo or false) _cwmL.text = _cwmL:AddChild(_8UuS(NUMBERFONT, 0x14, "" )) _cwmL.healthReductions = {} _cwmL.style = "textonbar" _cwmL.showBg = true _cwmL.showBg2 = true _cwmL.showValue = true _cwmL.hp = 0x64 _cwmL.hpMax = 0x64 _cwmL.percentage = 0x1 _cwmL.opacity = 0x1 _cwmL.hbScale = 0x1 _cwmL.hbYOffset = 0x0 _cwmL.hbWidth = 0x78 _cwmL.hbHeight = 0x12 _cwmL.barMargin = {x1 = 0x3, x2 = 0x3, y1 = 0x3, y2 = 0x3, fixed = true} _cwmL.fontSize = 0x14 _cwmL.hrDuration = 0.8 _cwmL.screenWidth = 0x780 _cwmL.screenHeight = 0x438 _cwmL.bgColor = _G7gV(0x1, 0x1, 0x1) _cwmL.bg2Color = _G7gV(0x0, 0x0, 0x0) _cwmL.barColor = _G7gV(0x1, 0x1, 0x1) _cwmL.hrColor = _G7gV(0x1, 0x1, 0x1) _cwmL.preUpdateFn = nil _cwmL.onSetPercentage = nil _cwmL:SetData(_xDOM) _cwmL:SetOpacity() _cwmL:SetHBSize(0x78, 0x12) _cwmL:SetFontSize(0x14) _cwmL:StartUpdating() _cwmL:AddToTable() end) _3pZx.ghbs = {} function _3pZx:AddToTable() _Zoee(_3pZx.ghbs, self) end function _3pZx:SetData(_ziKE) self.data = _ziKE self.basicAtlas = _ziKE.basic.atlas self.basicTex = _ziKE.basic.texture self.bgAtlas = _ziKE.bg and _ziKE.bg.atlas self.bgTex = _ziKE.bg and _ziKE.bg.texture self.barAtlas = _ziKE.bar and _ziKE.bar.atlas self.barTex = _ziKE.bar and _ziKE.bar.texture self:SetBgSkn(_ziKE.bgSkn) self:SetBarSkn(_ziKE.barSkn) end function _3pZx:SetBgTexture(_Z5MM, _KeJw) self.bg:SetTexture(_Z5MM, _KeJw) self.bg2:SetTexture(_Z5MM, _KeJw) end function _3pZx:SetBgSkn(_AXtt) self.bgSknData = _AXtt or nil if self.bgSkn then self.bgSkn:Kill() self.bgSkn = nil end if self.bgSknData then self.bgSkn = self:AddChild(_fgbd(self.bgSknData)) self.bgSkn:SetClickable(self.isDemo or false) self.bgSkn:MoveToBack() self.showBg = false else self:SetBgTexture(self.bgAtlas or self.basicAtlas, self.bgTex or self.basicTex) self.showBg = true end if self.data and (self.data.bg2 or not self.data.bg) then self.showBg2 = true else self.showBg2 = false end self.bgColor = self.data and self.data.bg and self.data.bg.color or _G7gV(0x1, 0x1, 0x1) self.bg2Color = self.data and self.data.bg2 and self.data.bg2.color or _G7gV(0x0, 0x0, 0x0) end function _3pZx:SetBarSkn(_RRfz) self.barSknData = _RRfz or nil if self.bar then self.bar:Kill() self.bar = nil end if self.barSknData then self.bar = self:AddChild(_fgbd(self.barSknData)) self.bar:SetClickable(self.isDemo or false) self.bar:MoveToFront() self.text:MoveToFront() else self.bar = self:AddChild(_bqgx(self.barAtlas or self.basicAtlas, self.barTex or self.basicTex)) self.bar:SetClickable(self.isDemo or false) self.bar:MoveToFront() self.text:MoveToFront() end end function _3pZx:SetBarTexture(_U5z2, _D5T0) if self.bar.SetTexture then self.bar:SetTexture(_U5z2, _D5T0) end end function _3pZx:SetValue(_wdhh, _pUmV, _HyL7) self.hp = _wdhh or self.hp self.hpMax = _pUmV or self.hpMax self.text:SetString(string.format( "%d/%d" , _wdhh, _pUmV)) self:SetPercentage(_wdhh / _pUmV, _HyL7) end function _3pZx:SetYOffSet(_KqnZ, _QC6o) _KqnZ = _KqnZ or self.hbYOffset self.hbYOffset = _KqnZ local _d23Q = self.screenWidth / 0x780 self:SetScreenOffset( - 0x5 * _d23Q, self.hbYOffset * (_QC6o and self.hbScale or 0x1) * _d23Q) end function _3pZx:SetPercentage(_yp1D, _SRb3) local _mWqG = self.percentage _yp1D = _yp1D or self.percentage _yp1D = math.max(0x0, math.min(_yp1D, 0x1)) if _mWqG - _yp1D > 0.01 and not _SRb3 and self.shown then self:DisplayHealthReduction(_mWqG, _yp1D) end self.percentage = _yp1D local _6ChQ, h = self:GetSize() _6ChQ = _6ChQ or 0x1 h = h or 0x1 local _LIWt, barH = self:GetBarFullSize() local _fhZE, barVH = self:GetBarVirtualSize() local _RKma = _LIWt - _fhZE * (0x1 - _yp1D) local _8EWE, oy = self:GetBarOffset() self.bar:SetSize(_RKma, barH) self.bar:SetPosition( - (_LIWt - _RKma) / 0x2 + _8EWE, oy, 0x0) if self.textHealthBar then self.textHealthBar:SetPercentage(_yp1D) end if self.onSetPercentage then self.onSetPercentage(self, _yp1D) end end function _3pZx:SetHBSize(_jBS9, _2ScZ) _jBS9 = _jBS9 or self.hbWidth _2ScZ = _2ScZ or self.hbHeight _jBS9 = math.max(_jBS9, 0x0) _2ScZ = math.max(_2ScZ, 0x0) self.hbWidth = _jBS9 self.hbHeight = _2ScZ _jBS9 = _jBS9 * self.hbScale _2ScZ = _2ScZ * self.hbScale self.bg:SetSize(_jBS9, _2ScZ) self.bg2:SetSize(math.max(_jBS9 - 0x2, 0x0), math.max(_2ScZ - 0x2, 0x0)) if self.bgSknData and self.bgSkn then local _wSVX, bgh = self:GetBgSknSize() self.bgSkn:SetSize(_wSVX, bgh) local _aQ2o, oy = self:GetBgOffset() self.bgSkn:SetPosition(_aQ2o, oy, 0x0) end self:SetPercentage() self:SetYOffSet() if self.textHealthBar then self.textHealthBar:SetFontSize(self.hbHeight * 0x1) end end function _3pZx:SetFontSize(_vqNE) _vqNE = _vqNE or self.fontSize self.fontSize = _vqNE self.text:SetSize(self.fontSize * self.hbScale) local _fKKr, h = self:GetSize() _fKKr = _fKKr or 0x1 h = h or 0x1 if self.style == "textoverbar" then self.text:SetPosition(0x0, h / 0x2 + self.fontSize * self.hbScale * 0.35, 0x0) elseif self.style == "barovertext" then self.text:SetPosition(0x0, - h / 0x2 - self.fontSize * self.hbScale * 0.35, 0x0) else self.text:SetPosition(0x0, 0x0, 0x0) end end function _3pZx:SetHBScale(_zxVi) _zxVi = _zxVi or self.hbScale self.hbScale = _zxVi self:SetHBSize() self:SetFontSize() if self.textHealthBar then self.textHealthBar:SetHBScale(_zxVi) end end function _3pZx:SetStyle(_Fa5R) _Fa5R = _Fa5R or self.style if _Fa5R == self.style then return end self.style = _Fa5R self:SetFontSize() end function _3pZx:SetOpacity(_9VwF) _9VwF = _9VwF or self.opacity self.opacity = _9VwF local _ThX3 = self.bgColor self.bg:SetTint(_ThX3.r, _ThX3.g, _ThX3.b, self.showBg and _9VwF or 0x0) _ThX3 = self.bg2Color self.bg2:SetTint(_ThX3.r, _ThX3.g, _ThX3.b, self.showBg and self.showBg2 and _9VwF or 0x0) _ThX3 = self.barColor self.bar:SetTint(_ThX3.r, _ThX3.g, _ThX3.b, _9VwF) if self.bgSkn then self.bgSkn:SetTint(0x1, 0x1, 0x1, _9VwF) end end function _3pZx:SetBarColor(_G76x, _vbEa, _S8OR) _G76x = _G76x or 0x1 _vbEa = _vbEa or 0x1 _S8OR = _S8OR or 0x1 if type(_G76x) == "table" then self.barColor.r = _G76x.r or _G76x.x or _G76x[0x1] or 0x1 self.barColor.g = _G76x.g or _G76x.y or _G76x[0x2] or 0x1 self.barColor.b = _G76x.b or _G76x.z or _G76x[0x3] or 0x1 else self.barColor.r = _G76x self.barColor.g = _vbEa self.barColor.b = _S8OR end self:SetOpacity() if self.textHealthBar then self.textHealthBar:SetColor(_G76x, _vbEa, _S8OR) end end function _3pZx:SetTextColor(_1szJ, _0BJF, _64uv, _WeYo) _1szJ = _1szJ or 0x1 _0BJF = _0BJF or 0x1 _64uv = _64uv or 0x1 _WeYo = _WeYo or 0x1 if type(_1szJ) == "table" then _1szJ.r = _1szJ.r or _1szJ.x or _1szJ[0x1] or 0x1 _1szJ.g = _1szJ.g or _1szJ.y or _1szJ[0x2] or 0x1 _1szJ.b = _1szJ.b or _1szJ.z or _1szJ[0x3] or 0x1 _1szJ.a = _1szJ.a or _1szJ[0x1] or 0x1 self.text:SetColour(_1szJ.r, _1szJ.g, _1szJ.b, _1szJ.a) else self.text:SetColour(_1szJ, _0BJF, _64uv, _WeYo) end end function _3pZx:DisplayHealthReduction(_twEo, _DT8i) local _On6y = self.bg2:AddChild(_bqgx(self.basicAtlas, self.basicTex)) _On6y:SetClickable(self.isDemo or false) local _3UzH, h = self:GetSize() _3UzH = _3UzH or 0x1 h = h or 0x1 local _wn0R, h2 = self:GetBarVirtualSize() local _wXOs = _wn0R * math.max(0x0, _twEo - _DT8i) local _Hr6M = ((_DT8i + _twEo) / 0x2 - 0.5) * _wn0R local _NKKr, oy = self:GetBarVirtualOffset() local _npQv = self.data and self.data.hrUseBarColor and self.barColor or self.hrColor _On6y:SetSize(_wXOs, h2) _On6y:SetPosition(_Hr6M + _NKKr, oy, 0x0) _On6y:SetTint(_npQv.r, _npQv.g, _npQv.b, self.opacity) _On6y.fadeTimer = self.hrDuration table.insert(self.healthReductions, _On6y) end function _3pZx:AnimateIn(_DAnh) self.animHBWidth = self.hbWidth self.animIn = true self.animSpeed = _DAnh or 0x5 self:SetHBSize(0x0, self.hbHeight) end function _3pZx:AnimateOut(_tq4N) self.animHBWidth = 0x0 self.animOut = true self.animSpeed = _tq4N or 0x5 end function _3pZx:Kill() _IXIM(_3pZx.ghbs, self) _p19o.Kill(self) end function _3pZx:OnMouseButton(_ElMl, _EW9J, _ng2G, _RmRm, ...) local _WwFe = _3pZx._base.OnMouseButton(self, _ElMl, _EW9J, _ng2G, _RmRm, ...) if not _EW9J and _ElMl == MOUSEBUTTON_LEFT then self.dragging = false end if not self.focus then return false end if self.isDemo and _EW9J and _ElMl == MOUSEBUTTON_LEFT then self.dragging = true end return _WwFe end function _3pZx:GetSize() return self.bg:GetSize() end function _3pZx:GetBgMargin() local _MPlO, h = self:GetSize() _MPlO = _MPlO or 0x1 h = h or 0x1 local _dde5 = self.bgSknData and self.bgSknData.margin or (self.data and self.data.bg and self.data.bg.margin) or {x1 = 0x0, x2 = 0x0, y1 = 0x0, y2 = 0x0, } local _aSxf = _dde5.fixed and _dde5.x1 or _dde5.x1 * h local _3bXv = _dde5.fixed and _dde5.x2 or _dde5.x2 * h local _PVh0 = _dde5.fixed and _dde5.y1 or _dde5.y1 * h local _Kbdg = _dde5.fixed and _dde5.y2 or _dde5.y2 * h return _aSxf, _3bXv, _PVh0, _Kbdg end function _3pZx:GetBarMargin() local _wkOq, h = self:GetSize() _wkOq = _wkOq or 0x1 h = h or 0x1 local _Tbu7 = self.barSknData and self.barSknData.margin or (self.data and self.data.bar and self.data.bar.margin) or self.barMargin local _V0aZ = _Tbu7.fixed and _Tbu7.x1 or _Tbu7.x1 * h local _a8hA = _Tbu7.fixed and _Tbu7.x2 or _Tbu7.x2 * h local _SeIF = _Tbu7.fixed and _Tbu7.y1 or _Tbu7.y1 * h local _TXNQ = _Tbu7.fixed and _Tbu7.y2 or _Tbu7.y2 * h return _V0aZ, _a8hA, _SeIF, _TXNQ end function _3pZx:GetBarVirtualMargin() local _yvGb, h = self:GetSize() _yvGb = _yvGb or 0x1 h = h or 0x1 local _oODK = self.barSknData and self.barSknData.vmargin or (self.data and self.data.bar and self.data.bar.vmargin) or (self.barSknData and self.barSknData.margin) or (self.data and self.data.bar and self.data.bar.margin) or self.barMargin local _Ler3 = _oODK.fixed and _oODK.x1 or _oODK.x1 * h local _zXm8 = _oODK.fixed and _oODK.x2 or _oODK.x2 * h local _yztc = _oODK.fixed and _oODK.y1 or _oODK.y1 * h local _a7vR = _oODK.fixed and _oODK.y2 or _oODK.y2 * h return _Ler3, _zXm8, _yztc, _a7vR end function _3pZx:GetBgOffset() local _NQhG, mx2, my1, my2 = self:GetBgMargin() return(_NQhG - mx2) / 0x2, (my1 - my2) / 0x2 end function _3pZx:GetBarOffset() local _CHwJ, mx2, my1, my2 = self:GetBarMargin() return(_CHwJ - mx2) / 0x2, (my1 - my2) / 0x2 end function _3pZx:GetBarVirtualOffset() local _H81x, px2, py1, py2 = self:GetBarVirtualMargin() return(_H81x - px2) / 0x2, (py1 - py2) / 0x2 end function _3pZx:GetBgSknSize() local _FtTh, h = self:GetSize() _FtTh = _FtTh or 0x1 h = h or 0x1 local _wAn5, mx2, my1, my2 = self:GetBgMargin() return math.max(_FtTh - _wAn5 - mx2, 0x2), math.max(h - my1 - my2, 0x2) end function _3pZx:GetBarFullSize() local _Rob5, h = self:GetSize() _Rob5 = _Rob5 or 0x1 h = h or 0x1 local _1Khu, mx2, my1, my2 = self:GetBarMargin() return math.max(_Rob5 - _1Khu - mx2, 0x2), math.max(h - my1 - my2, 0x2) end function _3pZx:GetBarVirtualSize() local _DKPB, h = self:GetSize() _DKPB = _DKPB or 0x1 h = h or 0x1 local _9YxH, px2, py1, py2 = self:GetBarVirtualMargin() return math.max(_DKPB - _9YxH - px2, 0x0), math.max(h - py1 - py2, 0x0) end function _3pZx:SetTarget(_G7ie) self.target = _G7ie self:OnUpdate() end function _3pZx:SetWorldOffset(_SRvB) self.worldOffset = _SRvB self:OnUpdate() end function _3pZx:SetScreenOffset(_5YDe, _PmPK) self.screen_offset.x = _5YDe self.screen_offset.y = _PmPK self:OnUpdate() end function _3pZx:GetScreenOffset() return self.screen_offset.x, self.screen_offset.y end function _3pZx:OnUpdate(_Tzaz) _Tzaz = _Tzaz or 0x0 if self.target and self.target:IsValid() then if self.preUpdateFn then self.preUpdateFn(_Tzaz) end local _OmO2 = nil if self.target.AnimState then _OmO2 = Vector3(self.target.AnimState:GetSymbolPosition(self.symbol or "" , self.worldOffset.x, self.worldOffset.y, self.worldOffset.z)) else _OmO2 = self.target:GetPosition() end if _OmO2 then local _Acg7 = Vector3(TheSim:GetScreenPos(_OmO2:Get())) _Acg7.x = _Acg7.x + self.screen_offset.x _Acg7.y = _Acg7.y + self.screen_offset.y self:SetPosition(_Acg7) end end if self.animOut and _Tzaz > 0x0 then if math.abs(self.hbWidth - self.animHBWidth) < 0x3 then self.animOut = false self:SetHBSize(self.animHBWidth, self.hbHeight) self:Kill() return else self:SetHBSize(_5ZLp(self.hbWidth, self.animHBWidth, self.animSpeed * _Tzaz), self.hbHeight) end elseif self.animIn and _Tzaz > 0x0 then if math.abs(self.hbWidth - self.animHBWidth) < 0x1 then self.animIn = false self:SetHBSize(self.animHBWidth, self.hbHeight) else self:SetHBSize(_5ZLp(self.hbWidth, self.animHBWidth, self.animSpeed * _Tzaz), self.hbHeight) end end local _sAyQ = self.healthReductions if #_sAyQ > 0x0 and _Tzaz > 0x0 then for _5lKz = #_sAyQ, 0x1, - 0x1 do local _sjn9 = _sAyQ[_5lKz] _sjn9.fadeTimer = _sjn9.fadeTimer - _Tzaz if _sjn9.fadeTimer < 0x0 then table.remove(_sAyQ, _5lKz) _sjn9:Kill() break end local _2Kad = self.data and self.data.hrUseBarColor and self.barColor or self.hrColor _sjn9:SetTint(_2Kad.r, _2Kad.g, _2Kad.b, self.opacity * _sjn9.fadeTimer / self.hrDuration) end end if self.showValue and not self.text.shown then self.text:Show() elseif not self.showValue and self.text.shown then self.text:Hide() end local _hcOr, sh = TheSim:GetScreenSize() if _hcOr ~= self.screenWidth or sh ~= self.screenHeight then self.screenWidth = _hcOr self.screenHeight = sh self:SetYOffSet() end if self.isDemo and self.dragging and _Tzaz > 0x0 then local _4eRJ = self:GetScale() local _Y72u, y = TheInput:GetScreenPosition():Get() local _tpNP = self:GetWorldPosition() local _KyiE, barH = self:GetBarVirtualSize() _KyiE = _KyiE * _4eRJ.x barH = barH * _4eRJ.y local _AXjD, oy = self:GetBarVirtualOffset() _AXjD = _AXjD * _4eRJ.x oy = oy * _4eRJ.y local _LqsJ = (_Y72u - (_tpNP.x + _AXjD) + _KyiE / 0x2) / _KyiE self:SetPercentage(_LqsJ, true) if not self.focus then self.dragging = false end end end return _3pZx 