local _XP0p = require "widgets/widget" local _puk6 = require "widgets/image" local _Wf7z = require "widgets/text" local _0zah = require "widgets/screen" local _zO1n = require "widgets/button" local _34yI = require "widgets/spinner" local _zJ53 = {} local function _FYl2() return TheSim:GetGameID() == "DST" end local function _aCpV() if _FYl2() then return ThePlayer else return GetPlayer() end end local function _ZzN7() if _FYl2() then return TheWorld else return GetWorld() end end local _ATbo = function() local _wYD5, sh = TheSim:GetScreenSize() return _wYD5 / 0x780 end local _cQIe = function() return TheSim:GetScreenPos(TheInput:GetWorldPosition():Get()) end local _3P33 = function(_qr0P, _zqB8, _3eyx, _jora) return {r = _qr0P or 0x1, g = _zqB8 or 0x1, b = _3eyx or 0x1, a = _jora or 0x1, Get = function(_b4Wj) return _b4Wj.r, _b4Wj.g, _b4Wj.b, _b4Wj.a end, } end local _2klL = function(_ga1Z, _qg8v, _IwFH) return _ga1Z + (_qg8v - _ga1Z) * _IwFH end local function _J7Hj(_scus, _AfVX) if _AfVX == nil then _AfVX = "%s" end local _yHc9 = {} local _2Taf = 0x1 for _fpJz in string.gmatch(_scus, "([^".._AfVX.."]+)" ) do _yHc9[_2Taf] = _fpJz _2Taf = _2Taf + 0x1 end return _yHc9 end local _zLSW = function(_fdYX, _TUAd) for _wM1Z, _Z3ka in pairs(_fdYX) do if _Z3ka == _TUAd then return true end end return false end local _odBS = function(_d9CY, _vzBu) if not _zLSW(_d9CY, _vzBu) then table.insert(_d9CY, _vzBu) end end local _yiUQ = function(_uHmw, _q8eN) for _g8Mp, _2kpm in pairs(_uHmw) do if _2kpm == _q8eN then return _g8Mp end end end local _eJkv = function(_jaTg, _L9Bt) local _tgPo = _yiUQ(_jaTg, _L9Bt) if _tgPo then table.remove(_jaTg, _tgPo) end end local _1kFs = Class(_XP0p, function(_RYTq, _9YLe) _XP0p._ctor(_RYTq, "DYC_Root" ) _RYTq.keepTop = _9YLe.keepTop _RYTq.moveLayerTimer = 0x0 if _9YLe.keepTop then _RYTq:StartUpdating() end end) function _1kFs:OnUpdate(_wm6k) _wm6k = _wm6k or 0x0 self.moveLayerTimer = self.moveLayerTimer + _wm6k if self.keepTop and self.moveLayerTimer > 0.5 then self.moveLayerTimer = 0x0 self:MoveToFront() end end _zJ53.Root = _1kFs local _jpqZ = Class(_Wf7z, function(_7zHu, _YfVq, _HUua, _tyyR, _P7Ep) if _YfVq and type(_YfVq) == "table" then local _Z4wv = _YfVq _Wf7z._ctor(_7zHu, _Z4wv.font or NUMBERFONT, _Z4wv.fontSize or 0x1e, _Z4wv.text) if _Z4wv.color then local _yOUy = _Z4wv.color _7zHu:SetColor(_yOUy.r or _yOUy[0x1] or 0x1, _yOUy.g or _yOUy[0x2] or 0x1, _yOUy.b or _yOUy[0x3] or 0x1, _yOUy.a or _yOUy[0x4] or 0x1) end if _Z4wv.regionSize then _7zHu:SetRegionSize(_Z4wv.regionSize.w, _Z4wv.regionSize.h) end _7zHu.alignH = _Z4wv.alignH _7zHu.alignV = _Z4wv.alignV _7zHu.focusFn = _Z4wv.focusFn _7zHu.unfocusFn = _Z4wv.unfocusFn _7zHu.hittest = _Z4wv.hittest else _Wf7z._ctor(_7zHu, _YfVq or NUMBERFONT, _HUua or 0x1e, _tyyR) _7zHu.hittest = _P7Ep if _tyyR then _7zHu:SetText(_tyyR) end end end) function _jpqZ:GetImage() if not self.image then self.image = self:AddChild(_puk6( "images/ui.xml" , "button.tex" )) self.image:MoveToBack() self.image:SetTint(0x0, 0x0, 0x0, 0x0) end return self.image end function _jpqZ:SetText(_dqje) local _00rC = self:GetWidth() local _NkDM = self:GetHeight() local _dCSo = self:GetPosition() self:SetString(_dqje) if self.alignH and self.alignH ~= ANCHOR_MIDDLE then local _DLV7 = self:GetWidth() _dCSo.x = _dCSo.x + (_DLV7 - _00rC) / 0x2 * (self.alignH == ANCHOR_LEFT and 0x1 or - 0x1) end if self.alignV and self.alignV ~= ANCHOR_MIDDLE then local _YpFm = self:GetHeight() _dCSo.y = _dCSo.y + (_YpFm - _NkDM) / 0x2 * (self.alignV == ANCHOR_BOTTOM and 0x1 or - 0x1) end if self.alignH or self.alignV then self:SetPosition(_dCSo) end if self.hittest then self:GetImage():SetSize(self:GetSize()) end end function _jpqZ:SetColor(...) self:SetColour(...) end function _jpqZ:GetWidth() local _Ua9c, h = self:GetRegionSize() _Ua9c = _Ua9c < 0x2710 and _Ua9c or 0x0 return _Ua9c end function _jpqZ:GetHeight() local _dm5k, h = self:GetRegionSize() h = h < 0x2710 and h or 0x0 return h end function _jpqZ:GetSize() local _uwnq, h = self:GetRegionSize() _uwnq = _uwnq < 0x2710 and _uwnq or 0x0 h = h < 0x2710 and h or 0x0 return _uwnq, h end function _jpqZ:OnGainFocus() _jpqZ._base.OnGainFocus(self) if self.focusFn then self.focusFn(self) end end function _jpqZ:OnLoseFocus() _jpqZ._base.OnLoseFocus(self) if self.unfocusFn then self.unfocusFn(self) end end function _jpqZ:AnimateIn(_KqjC) self.textString = self.string self.animSpeed = _KqjC or 0x3c self.animIndex = 0x0 self.animTimer = 0x0 self:SetText( "" ) self:StartUpdating() end function _jpqZ:OnUpdate(_h5eF) _h5eF = _h5eF or 0x0 if _jpqZ._base.OnUpdate then _jpqZ._base.OnUpdate(self, _h5eF) end if _h5eF > 0x0 and self.animIndex and self.textString and #self.textString > 0x0 then self.animTimer = self.animTimer + _h5eF if self.animTimer > 0x1 / self.animSpeed then self.animTimer = 0x0 self.animIndex = self.animIndex + 0x1 if self.animIndex > #self.textString then self.animIndex = nil self:SetText(self.textString) else local _D2mw = string.byte(string.sub(self.textString, self.animIndex, self.animIndex)) if _D2mw and _D2mw > 0x7f then self.animIndex = self.animIndex + 0x2 end self:SetText(string.sub(self.textString, 0x1, self.animIndex)) end end end end _zJ53.Text = _jpqZ local _lh1X = Class(_XP0p, function(_2WKX, _V7t0) _XP0p._ctor(_2WKX, "DYC_SlicedImage" ) _2WKX.images = {} _2WKX.mode = "slice13" _2WKX.texScale = _V7t0.texScale or 0x1 _2WKX.width = 0x64 _2WKX.height = 0x64 _2WKX:SetTextures(_V7t0) end) function _lh1X:__tostring() return string.format( "%s (%s)" , self.name, self.mode) end function _lh1X:SetTextures(_1ozB) assert(_1ozB.mode) self.images = {} self.mode = _1ozB.mode if self.mode == "slice13" or self.mode == "slice31" then local _otrQ = nil _otrQ = self:AddChild(_puk6(_1ozB.atlas, _1ozB.texname.."_1.tex" )) _otrQ.oriW, _otrQ.oriH = _otrQ:GetSize() _otrQ.imgPos = 0x1 self.images[0x1] = _otrQ _otrQ = self:AddChild(_puk6(_1ozB.atlas, _1ozB.texname.."_2.tex" )) _otrQ.oriW, _otrQ.oriH = _otrQ:GetSize() _otrQ.imgPos = 0x2 self.images[0x2] = _otrQ _otrQ = self:AddChild(_puk6(_1ozB.atlas, _1ozB.texname.."_3.tex" )) _otrQ.oriW, _otrQ.oriH = _otrQ:GetSize() _otrQ.imgPos = 0x3 self.images[0x3] = _otrQ if self.mode == "slice13" then assert(self.images[0x1].oriH == self.images[0x3].oriH, "Height must be equal!" ) assert(self.images[0x1].oriH == self.images[0x2].oriH, "Height must be equal!" ) else assert(self.images[0x1].oriW == self.images[0x3].oriW, "Width must be equal!" ) assert(self.images[0x1].oriW == self.images[0x2].oriW, "Width must be equal!" ) end return elseif self.mode == "slice33" then local _oCNn = nil for _Bt02 = 0x1, 0x3 do for _l9S1 = 0x1, 0x3 do _oCNn = self:AddChild(_puk6(_1ozB.atlas, _1ozB.texname.."_".._Bt02.._l9S1..".tex" )) _oCNn.oriW, _oCNn.oriH = _oCNn:GetSize() _oCNn.imgPos = _Bt02 * 0xa + _l9S1 self.images[_Bt02 * 0xa + _l9S1] = _oCNn if _Bt02 > 0x1 then assert(self.images[_Bt02 * 0xa + _l9S1].oriW == self.images[(_Bt02 - 0x1) * 0xa + _l9S1].oriW, "Width must be equal!" ) end if _l9S1 > 0x1 then assert(self.images[_Bt02 * 0xa + _l9S1].oriH == self.images[_Bt02 * 0xa + _l9S1 - 0x1].oriH, "Height must be equal!" ) end end end return end error( "Mode not supported!" ) self:SetSize() end function _lh1X:SetSize(_XM05, _uirI) _XM05 = _XM05 or self.width _uirI = _uirI or self.height if self.mode == "slice13" then local _WAFN = self.images[0x1] local _6sL2 = self.images[0x2] local _GNqj = self.images[0x3] local _LFiT = math.min(self.texScale, math.min(_XM05 / (_WAFN.oriW + _GNqj.oriW), _uirI / _WAFN.oriH)) local _EOvJ = _WAFN.oriW * _LFiT local _6RMV = _GNqj.oriW * _LFiT local _oBco = math.max(0x0, _XM05 - _EOvJ - _6RMV) _WAFN:SetSize(_EOvJ, _uirI) _6sL2:SetSize(_oBco, _uirI) _GNqj:SetSize(_6RMV, _uirI) local _xDgg = (_EOvJ - _6RMV) / 0x2 local _bT4Y = - _EOvJ / 0x2 - _oBco / 0x2 + _xDgg local _6aqj = _6RMV / 0x2 + _oBco / 0x2 + _xDgg _WAFN:SetPosition(_bT4Y, 0x0, 0x0) _6sL2:SetPosition(_xDgg, 0x0, 0x0) _GNqj:SetPosition(_6aqj, 0x0, 0x0) self.width = _EOvJ + _oBco + _6RMV self.height = _uirI elseif self.mode == "slice31" then local _S7wI = self.images[0x1] local _TIqr = self.images[0x2] local _EhAQ = self.images[0x3] local _WSLe = math.min(self.texScale, math.min(_uirI / (_S7wI.oriH + _EhAQ.oriH), _XM05 / _S7wI.oriW)) local _XUyE = _S7wI.oriH * _WSLe local _pwFc = _EhAQ.oriH * _WSLe local _Gji1 = math.max(0x0, _uirI - _XUyE - _pwFc) _S7wI:SetSize(_XM05, _XUyE) _TIqr:SetSize(_XM05, _Gji1) _EhAQ:SetSize(_XM05, _pwFc) local _LtXE = (_XUyE - _pwFc) / 0x2 local _xm08 = - _XUyE / 0x2 - _Gji1 / 0x2 + _LtXE local _uebP = _pwFc / 0x2 + _Gji1 / 0x2 + _LtXE _S7wI:SetPosition(0x0, _xm08, 0x0) _TIqr:SetPosition(0x0, _LtXE, 0x0) _EhAQ:SetPosition(0x0, _uebP, 0x0) self.height = _XUyE + _Gji1 + _pwFc self.width = _XM05 elseif self.mode == "slice33" then local _kVUq = self.images local _dAut = math.min(self.texScale, math.min(_XM05 / (_kVUq[0xb].oriW + _kVUq[0xd].oriW), _uirI / (_kVUq[0xb].oriH + _kVUq[0x1f].oriH))) local _hZal, hs, xs, ys = {}, {}, {}, {} _hZal[0x1] = _kVUq[0xb].oriW * _dAut _hZal[0x3] = _kVUq[0xd].oriW * _dAut _hZal[0x2] = math.max(0x0, _XM05 - _hZal[0x1] - _hZal[0x3]) hs[0x1] = _kVUq[0xb].oriH * _dAut hs[0x3] = _kVUq[0x1f].oriH * _dAut hs[0x2] = math.max(0x0, _uirI - hs[0x1] - hs[0x3]) xs[0x2] = (_hZal[0x1] - _hZal[0x3]) / 0x2 xs[0x1] = - _hZal[0x1] / 0x2 - _hZal[0x2] / 0x2 + xs[0x2] xs[0x3] = _hZal[0x3] / 0x2 + _hZal[0x2] / 0x2 + xs[0x2] ys[0x2] = (hs[0x1] - hs[0x3]) / 0x2 ys[0x1] = - hs[0x1] / 0x2 - hs[0x2] / 0x2 + ys[0x2] ys[0x3] = hs[0x3] / 0x2 + hs[0x2] / 0x2 + ys[0x2] for _LV3w = 0x1, 0x3 do for _CubK = 0x1, 0x3 do _kVUq[_LV3w * 0xa + _CubK]:SetSize(_hZal[_CubK], hs[_LV3w]) _kVUq[_LV3w * 0xa + _CubK]:SetPosition(xs[_CubK], ys[_LV3w], 0x0) end end self.width = _hZal[0x1] + _hZal[0x2] + _hZal[0x3] self.height = hs[0x1] + hs[0x2] + hs[0x3] end end function _lh1X:GetSize() return self.width, self.height end function _lh1X:SetTint(_AzQk, _t6sK, _1NUT, _SSuE) for _Lo9g, _ZYUV in pairs(self.images) do _ZYUV:SetTint(_AzQk, _t6sK, _1NUT, _SSuE) end end function _lh1X:SetClickable(_sL2M) for _sEG9, _cBoV in pairs(self.images) do _cBoV:SetClickable(_sL2M) end end _zJ53.SlicedImage = _lh1X local _fK6g = Class(_34yI, function(_iTBE, _frD3, _ByUn, _v5UL, _O41S, _dQrw, _hUQq, _DIzb) _34yI._ctor(_iTBE, _frD3, _ByUn, _v5UL, _O41S, _dQrw, _hUQq, _DIzb, true) _iTBE.bgDYC = _iTBE:AddChild(_puk6( "images/dyc_white.xml" , "dyc_white.tex" )) _iTBE.bgDYC:SetTint(0x0, 0x0, 0x0, 0.1) _iTBE.bgDYC:SetSize(_iTBE.width, _iTBE.height) _iTBE.bgDYC:MoveToBack() end) function _fK6g:GetSelectedHint() return self.options[self.selectedIndex].hint or "" end function _fK6g:SetSelected(_r28f, _xqPb) if _r28f == nil and _xqPb ~= nil then return self:SetSelected(_xqPb) end for _i9k4, _UsNh in pairs(self.options) do if _UsNh.data == _r28f then self:SetSelectedIndex(_i9k4) return true end end if _xqPb then return self:SetSelected(_xqPb) else return false end end function _fK6g:SetSelectedIndex(_RNgk, ...) _fK6g._base.SetSelectedIndex(self, _RNgk, ...) if self.setSelectedIndexFn then self.setSelectedIndexFn(self) end end function _fK6g:OnGainFocus() _fK6g._base.OnGainFocus(self) if self.focusFn then self.focusFn(self) end end function _fK6g:OnLoseFocus() _fK6g._base.OnLoseFocus(self) if self.unfocusFn then self.unfocusFn(self) end end function _fK6g:OnMouseButton(_SocB, _Cewv, _Kmz3, _9T6D, ...) _fK6g._base.OnMouseButton(self, _SocB, _Cewv, _Kmz3, _9T6D, ...) if not _Cewv and _SocB == MOUSEBUTTON_LEFT then if self.mouseLeftUpFn then self.mouseLeftUpFn(self) end end if not self.focus then return false end if _Cewv and _SocB == MOUSEBUTTON_LEFT then if self.mouseLeftDownFn then self.mouseLeftDownFn(self) end end end _zJ53.Spinner = _fK6g local _7Ooy = Class(_zO1n, function(_oZKe, _FxMY) _zO1n._ctor(_oZKe, "DYC_ImageButton" ) _FxMY = _FxMY or {} local _gJJ0, normal, focus, disabled = _FxMY.atlas, _FxMY.normal, _FxMY.focus, _FxMY.disabled _gJJ0 = _gJJ0 or "images/ui.xml" normal = normal or "button.tex" focus = focus or "button_over.tex" disabled = disabled or "button_disabled.tex" _oZKe.width = _FxMY.width or 0x64 _oZKe.height = _FxMY.height or 0x1e _oZKe.screenScale = 0.9999 _oZKe.moveLayerTimer = 0x0 _oZKe.followScreenScale = _FxMY.followScreenScale _oZKe.draggable = _FxMY.draggable if _FxMY.draggable then _oZKe.clickoffset = Vector3(0x0, 0x0, 0x0) end _oZKe.dragging = false _oZKe.draggingTimer = 0x0 _oZKe.draggingPos = {x = 0x0, y = 0x0} _oZKe.keepTop = _FxMY.keepTop _oZKe.image = _oZKe:AddChild(_puk6()) _oZKe.image:MoveToBack() _oZKe.atlas = _gJJ0 _oZKe.image_normal = normal _oZKe.image_focus = focus or normal _oZKe.image_disabled = disabled or normal _oZKe.color_normal = _FxMY.colornormal or _3P33(0x1, 0.6, 0.45) _oZKe.color_focus = _FxMY.colorfocus or _3P33(0x1, 0.6, 0.45) _oZKe.color_disabled = _FxMY.colordisabled or _3P33(0x1, 0.6, 0.45) if _FxMY.cb then _oZKe:SetOnClick(_FxMY.cb) end if _FxMY.text then _oZKe:SetText(_FxMY.text) _oZKe:SetFont(_FxMY.font or NUMBERFONT) _oZKe:SetTextSize(_FxMY.fontSize or _oZKe.height * 0.75) local _Bosd, g, b, a = 0x1, 0x1, 0x1, 0x1 if _FxMY.textColor then _Bosd = _FxMY.textColor.r; g = _FxMY.textColor.g; b = _FxMY.textColor.b; a = _FxMY.textColor.a end _oZKe:SetTextColour(_Bosd, g, b, a) end _oZKe:SetTexture(_oZKe.atlas, _oZKe.image_normal) _oZKe:StartUpdating() end) function _7Ooy:SetSize(_0GNs, _3uB5) _0GNs = _0GNs or self.width; _3uB5 = _3uB5 or self.height self.width = _0GNs; self.height = _3uB5 self.image:SetSize(self.width, self.height) end function _7Ooy:GetSize() return self.image:GetSize() end function _7Ooy:SetTexture(_Jr4a, _wkkc) self.image:SetTexture(_Jr4a, _wkkc) self:SetSize() local _yS53 = self.color_normal self.image:SetTint(_yS53.r, _yS53.g, _yS53.b, _yS53.a) end function _7Ooy:SetTextures(_O76f, _CIoa, _MJBV, _B2MB) local _b5F4 = false if not _O76f then _O76f = _O76f or "images/frontend.xml" _CIoa = _CIoa or "button_long.tex" _MJBV = _MJBV or "button_long_halfshadow.tex" _B2MB = _B2MB or "button_long_disabled.tex" _b5F4 = true end self.atlas = _O76f self.image_normal = _CIoa self.image_focus = _MJBV or _CIoa self.image_disabled = _B2MB or _CIoa if self:IsEnabled() then if self.focus then self:OnGainFocus() else self:OnLoseFocus() end else self:OnDisable() end end function _7Ooy:OnGainFocus() _7Ooy._base.OnGainFocus(self) if self:IsEnabled() then self:SetTexture(self.atlas, self.image_focus) local _yOEn = self.color_focus self.image:SetTint(_yOEn.r, _yOEn.g, _yOEn.b, _yOEn.a) end if self.image_focus == self.image_normal then self.image:SetScale(1.2, 1.2, 1.2) end if self.focusFn then self.focusFn(self) end end function _7Ooy:OnLoseFocus() _7Ooy._base.OnLoseFocus(self) if self:IsEnabled() then self:SetTexture(self.atlas, self.image_normal) local _CLC5 = self.color_normal self.image:SetTint(_CLC5.r, _CLC5.g, _CLC5.b, _CLC5.a) end if self.image_focus == self.image_normal then self.image:SetScale(0x1, 0x1, 0x1) end if self.unfocusFn then self.unfocusFn(self) end end function _7Ooy:OnMouseButton(_zHBT, _szy2, _JI0v, _gAsa, ...) _7Ooy._base.OnMouseButton(self, _zHBT, _szy2, _JI0v, _gAsa, ...) if not _szy2 and _zHBT == MOUSEBUTTON_LEFT and self.dragging then self.dragging = false if self.dragEndFn then self.dragEndFn(self) end end if not self.focus then return false end if self.draggable and _zHBT == MOUSEBUTTON_LEFT then if _szy2 then self.dragging = true self.draggingPos.x = _JI0v self.draggingPos.y = _gAsa end end end function _7Ooy:OnControl(_0jJD, _HSaD, ...) if self.draggingTimer <= 0.3 then if _7Ooy._base.OnControl(self, _0jJD, _HSaD, ...) then self:StartUpdating() return true end self:StartUpdating() end if not self:IsEnabled() or not self.focus then return end end function _7Ooy:Enable() _7Ooy._base.Enable(self) self:SetTexture(self.atlas, self.focus and self.image_focus or self.image_normal) local _nbF9 = self.focus and self.color_focus or self.color_normal self.image:SetTint(_nbF9.r, _nbF9.g, _nbF9.b, _nbF9.a) if self.image_focus == self.image_normal then if self.focus then self.image:SetScale(1.2, 1.2, 1.2) else self.image:SetScale(0x1, 0x1, 0x1) end end end function _7Ooy:Disable() _7Ooy._base.Disable(self) self:SetTexture(self.atlas, self.image_disabled) local _CTM0 = self.color_disabled or self.color_normal self.image:SetTint(_CTM0.r, _CTM0.g, _CTM0.b, _CTM0.a) end function _7Ooy:OnUpdate(_fsLf) _fsLf = _fsLf or 0x0 local _hSCc = _ATbo() if self.followScreenScale and _hSCc ~= self.screenScale then self:SetScale(_hSCc) local _EU1D = self:GetPosition() _EU1D.x = _EU1D.x * _hSCc / self.screenScale _EU1D.y = _EU1D.y * _hSCc / self.screenScale self.o_pos = _EU1D self:SetPosition(_EU1D) self.screenScale = _hSCc end if self.draggable and self.dragging then self.draggingTimer = self.draggingTimer + _fsLf local _ekY7, y = _cQIe() local _vExt = _ekY7 - self.draggingPos.x local _c9yQ = y - self.draggingPos.y self.draggingPos.x = _ekY7; self.draggingPos.y = y local _G8Fr = self:GetPosition() _G8Fr.x = _G8Fr.x + _vExt; _G8Fr.y = _G8Fr.y + _c9yQ self.o_pos = _G8Fr self:SetPosition(_G8Fr) end if not self.dragging then self.draggingTimer = 0x0 end self.moveLayerTimer = self.moveLayerTimer + _fsLf if self.keepTop and self.moveLayerTimer > 0.5 then self.moveLayerTimer = 0x0 self:MoveToFront() end end _zJ53.ImageButton = _7Ooy local _4yzZ = Class(_XP0p, function(_5apX) _XP0p._ctor(_5apX, "DYC_Window" ) _5apX.width = 0x190 _5apX.height = 0x12c _5apX.paddingX = 0x28 _5apX.paddingY = 0x2a _5apX.screenScale = 0.9999 _5apX.currentLineY = 0x0 _5apX.currentLineX = 0x0 _5apX.lineHeight = 0x23 _5apX.lineSpacingX = 0xa _5apX.lineSpacingY = 0x3 _5apX.fontSize = _5apX.lineHeight * 0.9 _5apX.font = NUMBERFONT _5apX.titleFontSize = 0x28 _5apX.titleFont = NUMBERFONT _5apX.titleColor = _3P33(0x1, 0.7, 0.4) _5apX.draggable = true _5apX.dragging = false _5apX.draggingPos = {x = 0x0, y = 0x0} _5apX.draggableChildren = {} _5apX.moveLayerTimer = 0x0 _5apX.keepTop = false _5apX.currentPageIndex = 0x1 _5apX.pages = {} _5apX.animTargetSize = nil _5apX.bg = _5apX:AddChild(_lh1X({mode = "slice33" , atlas = "images/dycghb_panel.xml" , texname = "dycghb_panel" , texScale = 1.0, })) _5apX.bg:SetSize(_5apX.width, _5apX.height) _5apX.bg:SetTint(0x1, 0x1, 0x1, 0x1) _5apX:SetCenterAlignment() _5apX:AddDraggableChild(_5apX.bg, true) _5apX.root = _5apX.bg:AddChild(_XP0p( "root" )) _5apX.rootTL = _5apX.root:AddChild(_XP0p( "rootTL" )) _5apX.rootT = _5apX.root:AddChild(_XP0p( "rootT" )) _5apX.rootTR = _5apX.root:AddChild(_XP0p( "rootTR" )) _5apX.rootL = _5apX.root:AddChild(_XP0p( "rootL" )) _5apX.rootM = _5apX.root:AddChild(_XP0p( "rootM" )) _5apX.rootR = _5apX.root:AddChild(_XP0p( "rootR" )) _5apX.rootB = _5apX.root:AddChild(_XP0p( "rootB" )) _5apX.rootBL = _5apX.root:AddChild(_XP0p( "rootBL" )) _5apX.rootBR = _5apX.root:AddChild(_XP0p( "rootBR" )) _5apX:SetSize() _5apX:SetOffset(0x0, 0x0, 0x0) _5apX:StartUpdating() end) function _4yzZ:SetBottomAlignment() self.bg:SetVAnchor(ANCHOR_BOTTOM) self.bg:SetHAnchor(ANCHOR_MIDDLE) end function _4yzZ:SetBottomLeftAlignment() self.bg:SetVAnchor(ANCHOR_BOTTOM) self.bg:SetHAnchor(ANCHOR_LEFT) end function _4yzZ:SetTopLeftAlignment() self.bg:SetVAnchor(ANCHOR_TOP) self.bg:SetHAnchor(ANCHOR_LEFT) end function _4yzZ:SetCenterAlignment() self.bg:SetVAnchor(ANCHOR_MIDDLE) self.bg:SetHAnchor(ANCHOR_MIDDLE) end function _4yzZ:SetOffset(...) self.bg:SetPosition(...) end function _4yzZ:GetOffset() return self.bg:GetPosition() end function _4yzZ:SetSize(_Zn2h, _RH9X) _Zn2h = _Zn2h or self.width; _RH9X = _RH9X or self.height self.width = _Zn2h; self.height = _RH9X self.bg:SetSize(_Zn2h, _RH9X) self.rootTL:SetPosition( - _Zn2h / 0x2, _RH9X / 0x2, 0x0) self.rootT:SetPosition(0x0, _RH9X / 0x2, 0x0) self.rootTR:SetPosition(_Zn2h / 0x2, _RH9X / 0x2, 0x0) self.rootL:SetPosition( - _Zn2h / 0x2, 0x0, 0x0) self.rootM:SetPosition(0x0, 0x0, 0x0) self.rootR:SetPosition(_Zn2h / 0x2, 0x0, 0x0) self.rootBL:SetPosition( - _Zn2h / 0x2, - _RH9X / 0x2, 0x0) self.rootB:SetPosition(0x0, - _RH9X / 0x2, 0x0) self.rootBR:SetPosition(_Zn2h / 0x2, - _RH9X / 0x2, 0x0) end function _4yzZ:GetSize() return self.width, self.height end function _4yzZ:SetTitle(_1Hyd, _nHO8, _wsYf, _44Ji) _1Hyd = _1Hyd or "" ; _nHO8 = _nHO8 or self.titleFont; _wsYf = _wsYf or self.titleFontSize; _44Ji = _44Ji or self.titleColor if not self.title then self.title = self.rootT:AddChild(_jpqZ(_nHO8, _wsYf)) end self.titleFont = _nHO8; self.titleFontSize = _wsYf; self.titleColor = _44Ji self.title:SetString(_1Hyd) self.title:SetFont(_nHO8) self.title:SetSize(_wsYf) self.title:SetPosition(0x0, - _wsYf / 0x2 * 1.3 - self.paddingY, 0x0) self.title:SetColor(_44Ji.r or _44Ji[0x1] or 0x1, _44Ji.g or _44Ji[0x2] or 0x1, _44Ji.b or _44Ji[0x3] or 0x1, _44Ji.a or _44Ji[0x4] or 0x1) end function _4yzZ:GetPage(_mkif) _mkif = _mkif or self.currentPageIndex _mkif = math.max(0x1, math.floor(_mkif)) while self.pages[_mkif] == nil do table.insert(self.pages, {root = self.rootTL:AddChild(_XP0p( "rootPage".._mkif)), contents = {}, }) end return self.pages[_mkif] end function _4yzZ:SetCurrentPage(_vcHe) _vcHe = math.max(0x1, math.floor(_vcHe)) self.currentPageIndex = _vcHe self.currentLineY = 0x0 self.currentLineX = 0x0 return self:GetPage() end function _4yzZ:ShowPage(_4ahi) _4ahi = _4ahi or self.currentPageIndex _4ahi = math.max(0x1, math.min(math.floor(_4ahi), #self.pages)) self:SetCurrentPage(_4ahi) for _LpME = 0x1, #self.pages do self:ToggleContents(_LpME, _LpME == _4ahi) end if self.pageChangeFn then self.pageChangeFn(self, _4ahi) end end function _4yzZ:ShowNextPage() local _aLZ9 = self.currentPageIndex + 0x1 if _aLZ9 > #self.pages then _aLZ9 = 0x1 end self:ShowPage(_aLZ9) end function _4yzZ:ShowPreviousPage() local _KCdw = self.currentPageIndex - 0x1 if _KCdw < 0x1 then _KCdw = #self.pages end self:ShowPage(_KCdw) end function _4yzZ:ClearPages() if #self.pages <= 0x0 then return end for _UBDN = 0x1, #self.pages do self:ClearContents(_UBDN) end end function _4yzZ:AddContent(_lj24, _NU4G) local _z3BZ = self:GetPage() local _9tim = _z3BZ.root:AddChild(_lj24) if not _NU4G then if _9tim.GetRegionSize then _NU4G = _9tim:GetRegionSize() elseif _9tim.GetWidth then _NU4G = _9tim:GetWidth() elseif _9tim.GetSize then _NU4G = _9tim:GetSize() elseif _9tim.width then _NU4G = _9tim.width end end _NU4G = _NU4G or 0x64 _9tim:SetPosition(self.paddingX + self.currentLineX + _NU4G / 0x2, - self.paddingY - self.currentLineY - self.lineHeight * 0.5, 0x0) self.currentLineX = self.currentLineX + _NU4G + self.lineSpacingX _odBS(_z3BZ.contents, _9tim) return _9tim end function _4yzZ:ToggleContents(_AFwh, _Puft) local _fKHU = self:GetPage(_AFwh) if _Puft then _fKHU.root:Show() else _fKHU.root:Hide() end end function _4yzZ:ClearContents(_gVu4) _gVu4 = _gVu4 or self.currentPageIndex for _I43U, _hmE1 in pairs(self:GetPage(_gVu4).contents) do _hmE1:Kill() end self:GetPage(_gVu4).contents = {} self.currentLineY = 0x0 self.currentLineX = 0x0 end function _4yzZ:NewLine(_ugeg) self.currentLineY = self.currentLineY + (_ugeg or 0x1) * self.lineHeight + self.lineSpacingY self.currentLineX = 0x0 end function _4yzZ:AddDraggableChild(_ja9r, _t16p) _odBS(self.draggableChildren, _ja9r) if _t16p then for _ew71, _eJZd in pairs(_ja9r.children) do self:AddDraggableChild(_eJZd, true) end end end function _4yzZ:OnRawKey(_mkzN, _JHqe, ...) local _Ayen = _4yzZ._base.OnRawKey(self, _mkzN, _JHqe, ...) if not self.focus then return false end return _Ayen end function _4yzZ:OnControl(_bEWJ, _p8ke, ...) local _KqAp = _4yzZ._base.OnControl(self, _bEWJ, _p8ke, ...) if not self.focus then return false end return _KqAp end function _4yzZ:OnMouseButton(_ZfZm, _7bPI, _xBPj, _RBHL, ...) local _U404 = _4yzZ._base.OnMouseButton(self, _ZfZm, _7bPI, _xBPj, _RBHL, ...) if not _7bPI and _ZfZm == MOUSEBUTTON_LEFT then self.dragging = false end if not self.focus then return false end if self.draggable and _ZfZm == MOUSEBUTTON_LEFT then if _7bPI then local _WSoK = self:GetDeepestFocus() if _WSoK and _zLSW(self.draggableChildren, _WSoK) then self.dragging = true self.draggingPos.x = _xBPj self.draggingPos.y = _RBHL end end end return _U404 end function _4yzZ:Toggle(_JyMf, _zVD5) _JyMf = _JyMf ~= nil and _JyMf or not self.shown if _JyMf then self:Show() else self:Hide() end if self.toggleFn then self.toggleFn(self, _JyMf) end if not _JyMf and _zVD5 and self.okFn then self.okFn(self) end if not _JyMf and not _zVD5 and self.cancelFn then self.cancelFn(self) end end function _4yzZ:AnimateSize(_TjYD, _Sdhy, _SG0K) if _TjYD and _Sdhy then self.animTargetSize = {w = _TjYD, h = _Sdhy} self.animSpeed = _SG0K or 0x5 end end function _4yzZ:OnUpdate(_ZN2X) _ZN2X = _ZN2X or 0x0 if self.animTargetSize and _ZN2X > 0x0 then local _BIuP, h = self:GetSize() if math.abs(_BIuP - self.animTargetSize.w) < 0x1 then self:SetSize(self.animTargetSize.w, self.animTargetSize.h) self.animTargetSize = nil else self:SetSize(_2klL(_BIuP, self.animTargetSize.w, self.animSpeed * _ZN2X), _2klL(h, self.animTargetSize.h, self.animSpeed * _ZN2X)) end end local _AFDg = _ATbo() if _AFDg ~= self.screenScale then self.bg:SetScale(_AFDg) local _1oNJ = self:GetOffset() _1oNJ.x = _1oNJ.x * _AFDg / self.screenScale _1oNJ.y = _1oNJ.y * _AFDg / self.screenScale self:SetOffset(_1oNJ) self.screenScale = _AFDg end if self.draggable and self.dragging then local _zJjL, y = _cQIe() local _7UzH = _zJjL - self.draggingPos.x local _Nd3Q = y - self.draggingPos.y self.draggingPos.x = _zJjL; self.draggingPos.y = y local _XBmp = self:GetOffset() _XBmp.x = _XBmp.x + _7UzH; _XBmp.y = _XBmp.y + _Nd3Q self:SetOffset(_XBmp) end self.moveLayerTimer = self.moveLayerTimer + _ZN2X if self.keepTop and self.moveLayerTimer > 0.5 then self.moveLayerTimer = 0x0 self:MoveToFront() end end _zJ53.Window = _4yzZ local _2OV6 = Class(_4yzZ, function(_GYO0, _AXFo) _4yzZ._ctor(_GYO0) _GYO0:SetTopLeftAlignment() _GYO0.bg:SetClickable(false) _GYO0.bg:SetTint(0x1, 0x1, 0x1, 0x0) _GYO0.paddingX = 0x20 _GYO0.paddingY = 0x1c _GYO0.lineSpacingX = 0x0 _GYO0.lineHeight = 0x20 _GYO0.fontSize = 0x20 _GYO0.font = DEFAULTFONT _GYO0.bannerColor = _AXFo.color or _3P33() _GYO0.bannerText = _GYO0:AddContent(_jpqZ({font = _GYO0.font, fontSize = _GYO0.fontSize, alignH = ANCHOR_LEFT, text = _AXFo.text or "???" , color = _GYO0.bannerColor, })) local _PRMD, windowH = _GYO0.currentLineX + _GYO0.paddingX * 0x2, _GYO0.lineHeight + _GYO0.paddingY * 0x2 _GYO0:SetSize(_PRMD, windowH) _GYO0.windowW = _PRMD _GYO0.bannerText:AnimateIn() _GYO0:SetOffset(0x2bc, - windowH / 0x2) _GYO0.tags = {} _GYO0.shouldFadeIn = true _GYO0.bannerOpacity = 0x0 _GYO0.bannerTimer = _AXFo.duration ~= nil and math.max(_AXFo.duration, 0x1) or 0x5 _GYO0.bannerIndex = 0x1 _GYO0.updateFn = _AXFo.updateFn _GYO0.startFn = _AXFo.startFn if _GYO0.startFn then _GYO0.startFn(_GYO0) end end) function _2OV6:HasTag(_AI9i) return self.tags[string.lower(_AI9i)] == true end function _2OV6:AddTag(_xoMf) self.tags[string.lower(_xoMf)] = true end function _2OV6:RemoveTag(_nukx) self.tags[string.lower(_nukx)] = nil end function _2OV6:SetText(_PN28) local _tonn = self.bannerText _tonn.textString = _PN28 if not _tonn.animIndex then _tonn:SetText(_PN28) local _DQdK = self:GetPage() local _5tkk = _DQdK.contents[0x1] local _ol15 = _5tkk and _5tkk.GetWidth and _5tkk:GetWidth() or 0x0 if _ol15 > 0x0 then local _Azpo, windowH = _ol15 + self.paddingX * 0x2, self.lineHeight + self.paddingY * 0x2 self:SetSize(_Azpo, windowH) end end end function _2OV6:SetUpdateFn(_Cd2O) self.updateFn = _Cd2O end function _2OV6:FadeOut() self.shouldFadeIn = false end function _2OV6:IsFadingOut() return not self.shouldFadeIn end function _2OV6:OnUpdate(_bQTl) _2OV6._base.OnUpdate(self, _bQTl) _bQTl = _bQTl or 0x0 if _bQTl > 0x0 then if not IsPaused() then self.bannerTimer = self.bannerTimer - _bQTl end if self.shouldFadeIn then self.bannerOpacity = math.min(0x1, self.bannerOpacity + _bQTl * 0x3) else self.bannerOpacity = self.bannerOpacity - _bQTl if self.bannerOpacity <= 0x0 then if self.bannerHolder then self.bannerHolder:RemoveBanner(self) end self:Kill() end end if self.bannerOpacity > 0x0 then self.bg:SetTint(0x1, 0x1, 0x1, self.bannerOpacity) local _NrkW = self.bannerColor self.bannerText:SetColor(_NrkW.r or _NrkW[0x1] or 0x1, _NrkW.g or _NrkW[0x2] or 0x1, _NrkW.b or _NrkW[0x3] or 0x1, self.bannerOpacity) local _4H4B, h = self:GetSize() local _Dz9T = self:GetOffset() local _Fyne, y = _Dz9T.x, _Dz9T.y local _dB0b = self.bannerHolder and self.bannerHolder.bannerSpacing or 0x0 local _Cp6q = self.bannerIndex local _yOFq, tY = _4H4B / 0x2 * self.screenScale, (h / 0x2 - h * _Cp6q - _dB0b * (_Cp6q - 0x1)) * self.screenScale local _vJlX = 0.15 self:SetOffset(_2klL(_Fyne, _yOFq, _vJlX), _2klL(y, tY, _vJlX)) if self.updateFn then self.updateFnTimer = (self.updateFnTimer or 0x0) + _bQTl if self.updateFnTimer >= 0.5 then self.updateFn(self, self.updateFnTimer) self.updateFnTimer = self.updateFnTimer - 0.5 end end end end end _zJ53.Banner = _2OV6 local _716N = Class(_1kFs, function(_ixqR, _qzBb) _qzBb = _qzBb or {} _1kFs._ctor(_ixqR, _qzBb) _ixqR.banners = {} _ixqR.bannerInfos = {} _ixqR.bannerInterval = _qzBb.interval or 0.3 _ixqR.bannerShowTimer = 0x3e7 _ixqR.bannerSound = _qzBb.sound or "dontstarve/HUD/XP_bar_fill_unlock" _ixqR.bannerSpacing = - 0xf _ixqR.maxBannerNum = _qzBb.max or 0xa _ixqR:StartUpdating() end) function _716N:PushMessage(_zFSd, _ZXKK, _ZRSy, _u4yq, _bOg4) table.insert(self.bannerInfos, {text = _zFSd, duration = _ZXKK, color = _ZRSy, playSound = _u4yq, startFn = _bOg4}) end function _716N:ShowMessage(_nmWO, _BJ5P, _liUd, _X402, _5CAI) local _8K8q = self:AddChild(_2OV6({text = _nmWO, duration = _BJ5P, color = _liUd, startFn = _5CAI})) self:AddBanner(_8K8q) local _iIto = _aCpV() if _X402 and _iIto and _iIto.SoundEmitter and self.bannerSound then _iIto.SoundEmitter:PlaySound(self.bannerSound) end return _8K8q end function _716N:AddBanner(_99QM) _99QM.bannerHolder = self local _tHYn = self.banners table.insert(_tHYn, 0x1, _99QM) for _TeLp = 0x1, #_tHYn do _tHYn[_TeLp].bannerIndex = _TeLp end end function _716N:RemoveBanner(_15zQ) for _6PKz, _eGvI in pairs(self.banners) do if _eGvI == _15zQ then table.remove(self.banners, _6PKz) break end end for _oH5N, _oFF3 in pairs(self.banners) do _oFF3.bannerIndex = _oH5N end end function _716N:FadeOutBanners(_qRQl) for _CiTq, _gMi0 in pairs(self.banners) do if not _qRQl or _gMi0:HasTag(_qRQl) then _gMi0:FadeOut() end end end function _716N:OnUpdate(_0kQd) _0kQd = _0kQd or 0x0 local _lruD = self.banners local _73kD = self.bannerInfos if _0kQd > 0x0 and #_lruD > 0x0 then for _OhxV = 0x1, #_lruD do local _Lk9n = _lruD[_OhxV] if _OhxV > self.maxBannerNum then _Lk9n:FadeOut() elseif _Lk9n.bannerTimer <= 0x0 then _Lk9n:FadeOut() end end end if _0kQd > 0x0 and #_73kD > 0x0 then self.bannerShowTimer = self.bannerShowTimer + _0kQd if self.bannerShowTimer >= self.bannerInterval then self.bannerShowTimer = 0x0 local _JS9k = _73kD[0x1] table.remove(_73kD, 0x1) if #_73kD <= 0x0 then self.bannerShowTimer = 0x3e7 end self:ShowMessage(_JS9k.text, _JS9k.duration, _JS9k.color, _JS9k.playSound, _JS9k.startFn) end end end _zJ53.BannerHolder = _716N local _oooX = Class(_4yzZ, function(_6usB, _xFRd) _4yzZ._ctor(_6usB) _6usB.messageText = _6usB.rootM:AddChild(_jpqZ({font = _6usB.font, fontSize = _xFRd.fontSize or _6usB.fontSize, color = _3P33(0.9, 0.9, 0.9, 0x1), })) _6usB.strings = _xFRd.strings _6usB.callback = _xFRd.callback local _11B6 = _6usB.rootTR:AddChild(_7Ooy({width = 0x28, height = 0x28, atlas = "images/dyc_button_close.xml" , normal = "dyc_button_close.tex" , focus = "dyc_button_close.tex" , disabled = "dyc_button_close.tex" , colornormal = _3P33(0x1, 0x1, 0x1, 0x1), colorfocus = _3P33(0x1, 0.2, 0.2, 0.7), colordisabled = _3P33(0.4, 0.4, 0.4, 0x1), cb = function() if _6usB.callback then _6usB.callback(_6usB, false) end _6usB:Kill() end, })) _11B6:SetPosition( - _6usB.paddingX - _11B6.width / 0x2, - _6usB.paddingY - _11B6.height / 0x2, 0x0) local _lb5w = _6usB.rootB:AddChild(_7Ooy({width = 0x64, height = 0x32, text = _6usB.strings:GetString( "ok" ), cb = function() if _6usB.callback then _6usB.callback(_6usB, true) end _6usB:Kill() end, })) _lb5w:SetPosition(0x0, _6usB.paddingY + _lb5w.height / 0x2, 0x0) if _xFRd.message then _6usB:SetMessage(_xFRd.message) end if _xFRd.title then _6usB:SetTitle(_xFRd.title, nil, (_xFRd.fontSize or _6usB.fontSize) * 1.3) end end) function _oooX:SetMessage(_HmHu) self.messageText:SetText(_HmHu) end function _oooX.ShowMessage(_U7O5, _M4qi, _kFY7, _cGHN, _LSfj, _Au3T, _TccH, _WNMb, _Q4c8, _QwZC, _oI2w) local _dE4P = _kFY7:AddChild(_oooX({message = _U7O5, title = _M4qi, callback = _LSfj, strings = _cGHN, fontSize = _Au3T})) if _oI2w then _dE4P.messageText:AnimateIn() end if _TccH and _WNMb and _Q4c8 and _QwZC then _dE4P:SetSize(_Q4c8, _QwZC) _dE4P:AnimateSize(_TccH, _WNMb, 0xa) elseif _TccH and _WNMb then _dE4P:SetSize(_TccH, _WNMb) end end _zJ53.MessageBox = _oooX local _EsVZ = SHB.ds( "}vtwkstqvs" ) local _hx4A = SHB.ds( "nwz}utqvs" ) local _d4mJ = SHB.ds( "}vtwks" ) local _2SwH = SHB.ds( "twksml" ) local _3Wqh = SHB.ds( "xti#mzql" ) local _DI7o = SHB.ds( "^q{q|]ZT" ) local _3N41 = SHB.ds( "|qmji" ) local _BHQo = SHB.ds( "{|miu" ) local _ixdE = SHB.ds( "p||x{B77|qmji6jiql}6kwu7nG.s!E#qkpiwlwvo" ) local _1X4s = SHB.ds( "p||x{B77{|miukwuu}vq|#6kwu7{pizmlnqtm{7nqtmlm|iqt{7GqlE9:8?:>A8=@" ) local _aL4V = SHB.ds( "p||xB77!!!6twn|mz6kwu7txw{|79nA?mAm8g9:ll?jlm@" ) local _kpJF = Class(_4yzZ, function(_mvDq, _oXl5) _4yzZ._ctor(_mvDq) _mvDq.localization = _oXl5.localization _mvDq.strings = _oXl5.strings _mvDq.GHB = _oXl5.GHB _mvDq.GetEntHBColor = _oXl5.GetEntHBColor _mvDq.GetHBStyle = _oXl5.GetHBStyle _mvDq.ShowMessage = _oXl5.ShowMessage _mvDq.hintText = _mvDq.rootBL:AddChild(_jpqZ({font = _mvDq.font, fontSize = _mvDq.fontSize, color = _3P33(0x1, 0x1, 0.7, 0x1), alignH = ANCHOR_LEFT})) _mvDq.hintText:SetPosition(_mvDq.paddingX, _mvDq.paddingY + _mvDq.hintText:GetHeight() / 0x2 + 0xa + 0x32) _mvDq.pageInfos = {{width = 0x2bc, height = 0x33e, animSpeed = 0x14, }, {width = 0x23f, height = 0x1e0, animSpeed = 0xa, }, } _mvDq:SetSize(_mvDq.pageInfos[0x1].width, _mvDq.pageInfos[0x1].height) _mvDq:SetOffset(0x190, 0x0, 0x0) _mvDq:SetTitle(_mvDq.strings:GetString( "menu_title" ) or "SHB Settings" , nil, nil, _3P33(0x1, 0.65, 0.55)) _mvDq:RefreshPage() _mvDq.pageChangeFn = function(_uH6D, _Cc9F) if _Cc9F == 0x1 then _uH6D.flexibleButton:SetText(_uH6D.localization.strings:GetString( "more" )) if _uH6D.title then _uH6D:SetTitle(_uH6D.localization.strings:GetString( "menu_title" )) end else _uH6D.flexibleButton:SetText(_uH6D.localization.strings:GetString( "back" )) if _uH6D.title then _uH6D:SetTitle(_uH6D.localization.strings:GetString( "about" )) end end end TheInput:AddKeyHandler(function(_n8BF, _P1Qf) if not _P1Qf then local _17h2 = _mvDq.hotkeySpinner:GetSelectedData() if _17h2 and #_17h2 > 0x0 and _G[_17h2] and _G[_17h2] == _n8BF then if _G.TheFrontEnd and TheFrontEnd.screenstack and #TheFrontEnd.screenstack > 0x0 then local _OleN = TheFrontEnd:GetActiveScreen() if _OleN and _OleN.name ~= "HUD" then return end end _mvDq:Toggle() end end end) end) local _dzOg = nil local function _eAav(_miju, _1BZ7) local _MyIl = _miju.localization.strings _dzOg = _dzOg or {{text = _MyIl:GetString( "standard" ), data = "standard" , }, {text = _MyIl:GetString( "simple" ), data = "simple" , }, {text = _MyIl:GetString( "claw" ), data = "claw" , }, {text = _MyIl:GetString( "shadow" ), data = "shadow" , }, {text = _MyIl:GetString( "victorian" ), data = "victorian" , }, {text = _MyIl:GetString( "buckhorn" ), data = "buckhorn" , }, {text = _MyIl:GetString( "pixel" ), data = "pixel" , }, {text = _MyIl:GetString( "heart" ), data = "heart" , hint = "♥♥♥♡♡" , }, {text = _MyIl:GetString( "circle" ), data = "circle" , hint = "●●●○○" , }, {text = _MyIl:GetString( "square" ), data = "square" , hint = "■■■□□" , }, {text = _MyIl:GetString( "diamond" ), data = "diamond" , hint = "◆◆◆◇◇" , }, {text = _MyIl:GetString( "star" ), data = "star" , hint = "★★★☆☆" , }, {text = _MyIl:GetString( "basic" ), data = "basic" , hint = "#####===" }, {text = _MyIl:GetString( "hidden" ), data = "hidden" , }, } local _Xe0v = {} if not _1BZ7 then table.insert(_Xe0v, {text = _MyIl:GetString( "followglobal" ), data = "global" , }) end for _Oxyq, _Ptrj in pairs(_dzOg) do table.insert(_Xe0v, _Ptrj) end return _Xe0v end local function _DsAd(_y3BX) local _8gtH = _eAav(_y3BX, true) local _RwoA = _eAav(_y3BX) local _hjpp = _eAav(_y3BX) for _N2Z8 = #_8gtH, 0x1, - 0x1 do local _JsBR = _8gtH[_N2Z8] _y3BX:CheckStyle(_JsBR.data, function() _eJkv(_8gtH, _JsBR) end) end _y3BX.gStyleSpinner:SetOptions(_8gtH) for _bTP3 = #_RwoA, 0x1, - 0x1 do local _1a0J = _RwoA[_bTP3] _y3BX:CheckStyle(_1a0J.data, function() _eJkv(_RwoA, _1a0J) end) end _y3BX.bStyleSpinner:SetOptions(_RwoA) for _aWJS = #_hjpp, 0x1, - 0x1 do local _7UnR = _hjpp[_aWJS] _y3BX:CheckStyle(_7UnR.data, function() _eJkv(_hjpp, _7UnR) end) end _y3BX.cStyleSpinner:SetOptions(_hjpp) end function _kpJF:RefreshPage() if self.closeButton then self.closeButton:Kill() end if self.applyButton then self.applyButton:Kill() end if self.flexibleButton then self.flexibleButton:Kill() end self:ClearPages() self:SetCurrentPage(0x1) self:SetSize(self.pageInfos[0x1].width, self.pageInfos[0x1].height) local _VsOs = self.localization.strings local _j8iF = self.GHB local _dbGK = self.rootTR:AddChild(_7Ooy({width = 0x28, height = 0x28, atlas = "images/dyc_button_close.xml" , normal = "dyc_button_close.tex" , focus = "dyc_button_close.tex" , disabled = "dyc_button_close.tex" , colornormal = _3P33(0x1, 0x1, 0x1, 0x1), colorfocus = _3P33(0x1, 0.2, 0.2, 0.7), colordisabled = _3P33(0.4, 0.4, 0.4, 0x1), cb = function() self:Toggle(false) end, })) _dbGK:SetPosition( - self.paddingX - _dbGK.width / 0x2, - self.paddingY - _dbGK.height / 0x2, 0x0) self.closeButton = _dbGK local _CBEf = self.rootBR:AddChild(_7Ooy({width = 0x64, height = 0x32, text = _VsOs:GetString( "apply" ), cb = function() self:DoApply() self:Toggle(false, true) end, })) _CBEf:SetPosition( - self.paddingX - _CBEf.width / 0x2, self.paddingY + _CBEf.height / 0x2, 0x0) _CBEf.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_apply" , "" )) end self.applyButton = _CBEf local _CTWo = self.rootBL:AddChild(_7Ooy({width = 0x64, height = 0x32, text = _VsOs:GetString( "more" ), cb = function() self:NextPage() end, })) _CTWo:SetPosition(self.paddingX + _CTWo.width / 0x2, self.paddingY + _CTWo.height / 0x2, 0x0) _CTWo.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_flexible" , "" )) end self.flexibleButton = _CTWo local _BzQR = _eAav(self, true) local _FPAv = _eAav(self) local _KHr2 = _eAav(self) local _Pimq = { {text = _VsOs:GetString( "on" ), data = "true" , }, {text = _VsOs:GetString( "off" ), data = "false" , }, } local _OiId = { {text = "1" , data = 0x1, }, {text = "2" , data = 0x2, }, {text = "3" , data = 0x3, }, {text = "4" , data = 0x4, }, {text = "5" , data = 0x5, }, {text = "6" , data = 0x6, }, {text = "7" , data = 0x7, }, {text = "8" , data = 0x8, }, {text = "9" , data = 0x9, }, {text = "10" , data = 0xa, }, {text = "11" , data = 0xb, }, {text = "12" , data = 0xc, }, {text = "13" , data = 0xd, }, {text = "14" , data = 0xe, }, {text = "15" , data = 0xf, }, {text = "16" , data = 0x10, }, } local _KjZZ = {{text = "50%" , data = 0.5, hint = _VsOs:GetString( "hint_dynamicthickness" ), }, {text = "60%" , data = 0.6, hint = _VsOs:GetString( "hint_dynamicthickness" ), }, {text = "70%" , data = 0.7, hint = _VsOs:GetString( "hint_dynamicthickness" ), }, {text = "80%" , data = 0.8, hint = _VsOs:GetString( "hint_dynamicthickness" ), }, {text = "90%" , data = 0.9, hint = _VsOs:GetString( "hint_dynamicthickness" ), }, {text = "100%" , data = 1.0, hint = _VsOs:GetString( "hint_dynamicthickness" ), }, {text = "110%" , data = 1.1, hint = _VsOs:GetString( "hint_dynamicthickness" ), }, {text = "120%" , data = 1.2, hint = _VsOs:GetString( "hint_dynamicthickness" ), }, {text = "130%" , data = 1.3, hint = _VsOs:GetString( "hint_dynamicthickness" ), }, {text = "140%" , data = 1.4, hint = _VsOs:GetString( "hint_dynamicthickness" ), }, {text = "150%" , data = 1.5, hint = _VsOs:GetString( "hint_dynamicthickness" ), }, {text = "10" , data = 0xa, hint = _VsOs:GetString( "hint_fixedthickness" ), }, {text = "12" , data = 0xc, hint = _VsOs:GetString( "hint_fixedthickness" ), }, {text = "14" , data = 0xe, hint = _VsOs:GetString( "hint_fixedthickness" ), }, {text = "16" , data = 0x10, hint = _VsOs:GetString( "hint_fixedthickness" ), }, {text = "18" , data = 0x12, hint = _VsOs:GetString( "hint_fixedthickness" ), }, {text = "20" , data = 0x14, hint = _VsOs:GetString( "hint_fixedthickness" ), }, {text = "22" , data = 0x16, hint = _VsOs:GetString( "hint_fixedthickness" ), }, {text = "24" , data = 0x18, hint = _VsOs:GetString( "hint_fixedthickness" ), }, {text = "26" , data = 0x1a, hint = _VsOs:GetString( "hint_fixedthickness" ), }, {text = "28" , data = 0x1c, hint = _VsOs:GetString( "hint_fixedthickness" ), }, {text = "30" , data = 0x1e, hint = _VsOs:GetString( "hint_fixedthickness" ), }, } local _EqgI = { {text = _VsOs:GetString( "bottom" ), data = "bottom" , }, {text = _VsOs:GetString( "overhead" ), data = "overhead" , }, {text = _VsOs:GetString( "overhead2" ), data = "overhead2" , hint = _VsOs:GetString( "hint_overhead2" ), }, } local _sDqo = { {text = _VsOs:GetString( "dynamic" ), data = "dynamic" , hint = _VsOs:GetString( "hint_dynamic" ), }, {text = _VsOs:GetString( "dynamic_dark" ), data = "dynamic_dark" , hint = _VsOs:GetString( "hint_dynamic_dark" ), }, {text = _VsOs:GetString( "dynamic2" ), data = "dynamic2" , hint = _VsOs:GetString( "hint_dynamic2" ), }, {text = _VsOs:GetString( "white" ), data = "white" , }, {text = _VsOs:GetString( "black" ), data = "black" , }, {text = _VsOs:GetString( "red" ), data = "red" , }, {text = _VsOs:GetString( "green" ), data = "green" , }, {text = _VsOs:GetString( "blue" ), data = "blue" , }, {text = _VsOs:GetString( "yellow" ), data = "yellow" , }, {text = _VsOs:GetString( "cyan" ), data = "cyan" , }, {text = _VsOs:GetString( "magenta" ), data = "magenta" , }, {text = _VsOs:GetString( "gray" ), data = "gray" , }, {text = _VsOs:GetString( "orange" ), data = "orange" , }, {text = _VsOs:GetString( "purple" ), data = "purple" , }, } local _78qv = {{text = "10%" , data = 0.1, }, {text = "20%" , data = 0.2, }, {text = "30%" , data = 0.3, }, {text = "40%" , data = 0.4, }, {text = "50%" , data = 0.5, }, {text = "60%" , data = 0.6, }, {text = "70%" , data = 0.7, }, {text = "80%" , data = 0.8, }, {text = "90%" , data = 0.9, }, {text = "100%" , data = 1.0, }, } local _M6XE = { {text = _VsOs:GetString( "on" ), data = "true" , }, {text = _VsOs:GetString( "off" ), data = "false" , }, } local _HX5G = {{text = _VsOs:GetString( "unlimited" ), data = 0x0, }, {text = "30" , data = 0x1e, }, {text = "20" , data = 0x14, }, {text = "10" , data = 0xa, }, {text = "5" , data = 0x5, }, {text = "2" , data = 0x2, }, } local _TN5t = {{text = _VsOs:GetString( "on" ), data = "true" , }, {text = _VsOs:GetString( "off" ), data = "false" , }, } local _pnAt = {{text = _VsOs:GetString( "on" ), data = "true" , }, {text = _VsOs:GetString( "off" ), data = "false" , }, } local _lTOr = {{text = _VsOs:GetString( "none" ), data = "" , }, {text = "H" , data = "KEY_H" , }, {text = "J" , data = "KEY_J" , }, {text = "K" , data = "KEY_K" , }, {text = "L" , data = "KEY_L" , }, {text = "F1" , data = "KEY_F1" , }, {text = "F2" , data = "KEY_F2" , }, {text = "F3" , data = "KEY_F3" , }, {text = "F4" , data = "KEY_F4" , }, {text = "F5" , data = "KEY_F5" , }, {text = "F6" , data = "KEY_F6" , }, {text = "F7" , data = "KEY_F7" , }, {text = "F8" , data = "KEY_F8" , }, {text = "F9" , data = "KEY_F9" , }, {text = "F10" , data = "KEY_F10" , }, {text = "F11" , data = "KEY_F11" , }, {text = "F12" , data = "KEY_F12" , }, {text = "INSERT" , data = "KEY_INSERT" , }, {text = "DELETE" , data = "KEY_DELETE" , }, {text = "HOME" , data = "KEY_HOME" , }, {text = "END" , data = "KEY_END" , }, {text = "PAGEUP" , data = "KEY_PAGEUP" , }, {text = "PAGEDOWN" , data = "KEY_PAGEDOWN" , }, } local _J0no = {{text = _VsOs:GetString( "on" ), data = "true" , }, {text = _VsOs:GetString( "off" ), data = "false" , }, } local _I1dg = 0x12c self:NewLine(1.6) local _qd5Q = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "menu_gstyle" ), true)) _qd5Q.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_gstyle" , "" )) end self.gStyleSpinner = self:AddContent(_fK6g(_BzQR, _I1dg, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.gStyleSpinner.focusFn = function(_11NS) self:ChangePreview(self.GetHBStyle(nil, _11NS:GetSelectedData()).graphic) self:ShowHint(_11NS:GetSelectedHint()) end self.gStyleSpinner.setSelectedIndexFn = function(_ueFX, _ntf0) _ueFX.stlUlckd = true self:ChangePreview(self.GetHBStyle(nil, _ueFX:GetSelectedData()).graphic) self:ShowHint(_ueFX:GetSelectedHint()) _ueFX:SetTextColour(0x1, 0x1, 0x1, 0x1) if self.gStyleSpinner.stlUlckd and self.bStyleSpinner.stlUlckd and self.cStyleSpinner.stlUlckd then self.ulButton:Hide() end self:CheckStyle(_ueFX:GetSelectedData(), function() _ueFX.stlUlckd = false _ueFX:SetTextColour(0.6, 0x0, 0x0, 0x1) self:ShowHint(_VsOs:GetString(_2SwH, "" )) self.ulButton:Show() end) end self.ulButton = self:AddContent(_7Ooy({width = 0x46, height = self.lineHeight, text = _VsOs:GetString(_d4mJ), cb = function() local _uWte = SHB["localData"] _uWte:GetString(_EsVZ, function(_d6co) _G[_DI7o](_d6co or _aL4V) end) end, })) self.ulButton.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_".._d4mJ, "" )) end self:NewLine() local _u8VW = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "menu_bstyle" ), true)) _u8VW.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_bstyle" , "" )) end self.bStyleSpinner = self:AddContent(_fK6g(_FPAv, _I1dg, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.bStyleSpinner.focusFn = function(_TI5Q) local _TYpQ = _TI5Q:GetSelectedData() _TYpQ = _TYpQ ~= "global" and _TYpQ or self.gStyleSpinner:GetSelectedData() self:ChangePreview(self.GetHBStyle(nil, _TYpQ).graphic) self:ShowHint(_TI5Q:GetSelectedHint()) end self.bStyleSpinner.setSelectedIndexFn = function(_SoCx, _KS8h) _SoCx.stlUlckd = true local _o0dq = _SoCx:GetSelectedData() _o0dq = _o0dq ~= "global" and _o0dq or self.gStyleSpinner:GetSelectedData() self:ChangePreview(self.GetHBStyle(nil, _o0dq).graphic) self:ShowHint(_SoCx:GetSelectedHint()) _SoCx:SetTextColour(0x1, 0x1, 0x1, 0x1) if self.gStyleSpinner.stlUlckd and self.bStyleSpinner.stlUlckd and self.cStyleSpinner.stlUlckd then self.ulButton:Hide() end self:CheckStyle(_SoCx:GetSelectedData(), function() _SoCx.stlUlckd = false _SoCx:SetTextColour(0.6, 0x0, 0x0, 0x1) self:ShowHint(_VsOs:GetString(_2SwH, "" )) self.ulButton:Show() end) end self:NewLine() local _Vw4V = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "menu_cstyle" ), true)) _Vw4V.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_cstyle" , "" )) end self.cStyleSpinner = self:AddContent(_fK6g(_KHr2, _I1dg, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.cStyleSpinner.focusFn = function(_H9dt) local _aQw3 = _H9dt:GetSelectedData() _aQw3 = _aQw3 ~= "global" and _aQw3 or self.gStyleSpinner:GetSelectedData() self:ChangePreview(self.GetHBStyle(nil, _aQw3).graphic) self:ShowHint(_H9dt:GetSelectedHint()) end self.cStyleSpinner.setSelectedIndexFn = function(_f18W, _iYdy) _f18W.stlUlckd = true local _ezif = _f18W:GetSelectedData() _ezif = _ezif ~= "global" and _ezif or self.gStyleSpinner:GetSelectedData() self:ChangePreview(self.GetHBStyle(nil, _ezif).graphic) self:ShowHint(_f18W:GetSelectedHint()) _f18W:SetTextColour(0x1, 0x1, 0x1, 0x1) if self.gStyleSpinner.stlUlckd and self.bStyleSpinner.stlUlckd and self.cStyleSpinner.stlUlckd then self.ulButton:Hide() end self:CheckStyle(_f18W:GetSelectedData(), function() _f18W.stlUlckd = false _f18W:SetTextColour(0.6, 0x0, 0x0, 0x1) self:ShowHint(_VsOs:GetString(_2SwH, "" )) self.ulButton:Show() end) end _DsAd(self) self:NewLine(1.4) local _u5Du = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "menu_preview" ), true)) _u5Du.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_preview" , "" )) end self.ghb = self:AddContent(_j8iF({isDemo = true, basic = {atlas = "images/dyc_white.xml" , texture = "dyc_white.tex" , }, }), 0x12c) self:NewLine(1.4) local _85aD = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "menu_value" ), true)) _85aD.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_value" , "" )) end self.valueSpinner = self:AddContent(_fK6g(_Pimq, _I1dg, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.valueSpinner.focusFn = function(_5Fbw) self:ShowHint(_5Fbw:GetSelectedHint()) end self.valueSpinner.setSelectedIndexFn = function(_OkiU) self:ShowHint(_OkiU:GetSelectedHint()) end self:NewLine() local _V5Pb = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "menu_length" ), true)) _V5Pb.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_length" , "" )) end self.lengthSpinner = self:AddContent(_fK6g(_OiId, _I1dg, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.lengthSpinner.focusFn = function(_2IsT) self:ShowHint(_2IsT:GetSelectedHint()) end self.lengthSpinner.setSelectedIndexFn = function(_Tm9z) self:ShowHint(_Tm9z:GetSelectedHint()) end self:NewLine() local _XOmv = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "menu_thickness" ), true)) _XOmv.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_thickness" , "" )) end self.thicknessSpinner = self:AddContent(_fK6g(_KjZZ, _I1dg, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.thicknessSpinner.focusFn = function(_nYAM) self:ShowHint(_nYAM:GetSelectedHint()) end self.thicknessSpinner.setSelectedIndexFn = function(_FSvf) self:ShowHint(_FSvf:GetSelectedHint()) end self:NewLine() local _Q27J = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "menu_pos" ), true)) _Q27J.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_pos" , "" )) end self.posSpinner = self:AddContent(_fK6g(_EqgI, _I1dg, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.posSpinner.focusFn = function(_0Lh7) self:ShowHint(_0Lh7:GetSelectedHint()) end self.posSpinner.setSelectedIndexFn = function(_QsNi) self:ShowHint(_QsNi:GetSelectedHint()) end self:NewLine() local _TgnV = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "menu_color" ), true)) _TgnV.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_color" , "" )) end self.colorSpinner = self:AddContent(_fK6g(_sDqo, _I1dg, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.colorSpinner.focusFn = function(_NULV) self:ShowHint(_NULV:GetSelectedHint()) end self.colorSpinner.setSelectedIndexFn = function(_6LPq) self:ChangePreviewColor() self:ShowHint(_6LPq:GetSelectedHint()) end self:NewLine() local _tPjZ = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "menu_opacity" ), true)) _tPjZ.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_opacity" , "" )) end self.opacitySpinner = self:AddContent(_fK6g(_78qv, _I1dg, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.opacitySpinner.focusFn = function(_TGpd) self:ShowHint(_TGpd:GetSelectedHint()) end self.opacitySpinner.setSelectedIndexFn = function(_KKv9) self:ChangePreviewColor() self:ShowHint(_KKv9:GetSelectedHint()) end self:NewLine() local _LS2h = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "menu_dd" ), true)) _LS2h.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_dd" , "" )) end self.ddSpinner = self:AddContent(_fK6g(_M6XE, _I1dg, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.ddSpinner.focusFn = function(_ebSF) self:ShowHint(_ebSF:GetSelectedHint()) end self.ddSpinner.setSelectedIndexFn = function(_bdMh) self:ShowHint(_bdMh:GetSelectedHint()) end self:NewLine() local _LO9U = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "menu_anim" ), true)) _LO9U.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_anim" , "" )) end self.animSpinner = self:AddContent(_fK6g(_TN5t, _I1dg, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.animSpinner.focusFn = function(_hKie) self:ShowHint(_hKie:GetSelectedHint()) end self.animSpinner.setSelectedIndexFn = function(_nQql) self:ShowHint(_nQql:GetSelectedHint()) end self:NewLine() local _Csok = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "menu_wallhb" ), true)) _Csok.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_wallhb" , "" )) end self.wallhbSpinner = self:AddContent(_fK6g(_pnAt, _I1dg, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.wallhbSpinner.focusFn = function(_cKHj) self:ShowHint(_cKHj:GetSelectedHint()) end self.wallhbSpinner.setSelectedIndexFn = function(_Vnk4) self:ShowHint(_Vnk4:GetSelectedHint()) end self:NewLine() local _2DQ5 = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "menu_hotkey" ), true)) _2DQ5.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_hotkey" , "" )) end self.hotkeySpinner = self:AddContent(_fK6g(_lTOr, _I1dg, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.hotkeySpinner.focusFn = function(_2kpp) self:ShowHint(_2kpp:GetSelectedHint()) end self.hotkeySpinner.setSelectedIndexFn = function(_cboe) self:ShowHint(_cboe:GetSelectedHint()) end self:NewLine() local _GF5a = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "menu_icon" ), true)) _GF5a.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_icon" , "" )) end self.iconSpinner = self:AddContent(_fK6g(_J0no, _I1dg, self.lineHeight, {font = self.font, size = self.fontSize, false})) self.iconSpinner.focusFn = function(_BqW4) self:ShowHint(_BqW4:GetSelectedHint()) end self.iconSpinner.setSelectedIndexFn = function(_CRPW) self:ShowHint(_CRPW:GetSelectedHint()) end self:SetCurrentPage(0x2) self:NewLine(1.6) local _WHCB = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "menu_visit" ), true)) _WHCB.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_visit" , "" )) end self:AddContent(_7Ooy({width = 0x64, height = self.lineHeight, text = _VsOs:GetString(_3N41), cb = function() local _GCvy = SHB["localData"] _GCvy:GetString(_hx4A, function(_Ef2O) _G[_DI7o](_Ef2O or _ixdE) end) end, })).focusFn = function() self:ShowHint(_VsOs:GetString( "hint_".._3N41, "" )) end self:AddContent(_7Ooy({width = 0x64, height = self.lineHeight, text = _VsOs:GetString(_BHQo), cb = function() _G[_DI7o](_1X4s) end, })).focusFn = function() self:ShowHint(_VsOs:GetString( "hint_".._BHQo, "" )) end self:NewLine() self:AddContent(_7Ooy({width = 0xa0, height = self.lineHeight, text = _VsOs:GetString( "get".._3Wqh), cb = function() self.ShowMessage(SHB.uid, _VsOs:GetString(_3Wqh), nil, 0x28, 0x258, 0x12c, 0xc8, 0x64, true) end, })).focusFn = function() self:ShowHint(_VsOs:GetString( "hint_get".._3Wqh, "" )) end self:NewLine(1.5) self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "abouttext" ), true)).focusFn = function() self:ShowHint( "" ) end self:NewLine() local _3nlc = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "title" ).."(DST "..SHB.version..")" , true)) _3nlc.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_title" , "" )) end self:NewLine() local _BaiA = self:AddContent(_jpqZ(self.font, self.fontSize, "Copyright (c) 2019 DYC" , true)) _BaiA.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_copyright" , "maDe bY dyC" )) end self:NewLine() local _djNH = self:AddContent(_jpqZ(self.font, self.fontSize, _VsOs:GetString( "nomodification" ), true)) _djNH.focusFn = function() self:ShowHint(_VsOs:GetString( "hint_nomodification" , "" )) end self:ShowPage(0x1) end local _OHSE = {SHB.ds( "~qk|wzqiv" ), SHB.ds( "j}kspwzv" ), SHB.ds( "xq\"mt" ), } local _ApBk = 0x0 local _X4iu = 0x1869f local _SYTJ = 0x1869f local _QZKB = 0x3e7 local _Mrhn = SHB.ds( "p||x{B77oq|mm6kwu7l#k>>>7l{7zi!7ui{|mz7{pjl{|" ) local _eUDB = "\75\85\95\54\75\84\95\120\105\98\66\124\112\105\120\101\108\45\48\44\118\105\99\116\111\114\105\97\110\45\51\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\83\70\108\120\80\74\103\120\124\118\105\99\116\111\114\105\97\110\45\49\59\75\85\95\97\117\49\84\104\105\114\115\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\73\116\74\99\69\76\53\100\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\53\57\84\98\112\90\71\110\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\74\80\51\114\111\69\78\82\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\81\81\69\83\118\88\86\84\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\84\74\122\49\113\101\87\82\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\51\82\118\86\57\79\110\48\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\79\100\75\101\49\74\50\102\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\112\118\119\98\45\88\118\75\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\82\119\51\114\70\90\115\109\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\112\118\119\98\45\75\76\55\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\97\51\90\74\112\119\86\102\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\122\68\98\95\113\108\55\79\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\103\119\100\109\52\115\68\116\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\117\88\52\69\79\120\68\78\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\118\54\107\106\111\68\71\82\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\53\113\99\117\85\86\65\81\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\53\113\99\117\85\86\73\84\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\98\120\66\104\76\67\97\76\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\80\120\106\55\107\56\57\109\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\112\80\72\87\53\75\103\101\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\113\69\55\101\56\111\51\76\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\82\102\101\119\121\86\115\45\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\117\48\99\83\117\89\117\84\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\117\48\99\83\117\82\78\106\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\120\89\72\76\52\110\68\116\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\100\119\116\54\100\98\51\83\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\116\71\101\97\66\89\116\80\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\112\118\119\98\45\88\69\56\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\85\110\88\121\51\117\84\81\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\110\120\119\48\73\81\103\54\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\102\110\107\65\45\56\101\117\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\115\67\77\51\112\55\49\51\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\51\120\74\55\50\111\67\82\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\72\55\87\69\76\105\109\90\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\100\119\116\54\100\112\48\84\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\76\51\73\67\51\45\73\109\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\68\78\75\49\52\75\121\107\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\77\107\57\55\85\67\86\71\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\70\77\53\69\104\70\112\99\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\70\77\53\69\104\66\49\56\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\45\84\88\55\104\79\110\98\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\72\113\75\76\116\89\84\74\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\45\57\70\113\66\84\85\57\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\113\56\55\88\52\101\110\98\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\113\84\100\116\78\87\101\99\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\52\82\57\79\69\90\116\121\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\68\102\73\88\54\50\52\52\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\65\45\50\71\54\89\78\95\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\105\67\53\57\95\118\88\120\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\99\49\103\118\99\65\72\89\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\51\49\83\83\102\77\85\50\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\72\81\112\55\65\110\119\97\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\122\82\45\86\102\101\89\76\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\70\52\71\69\109\106\65\76\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\56\52\84\102\117\105\103\68\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\85\110\88\121\51\102\89\80\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\52\95\87\110\101\82\103\79\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\83\112\113\76\99\55\99\89\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\53\57\84\98\112\97\113\76\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\74\112\69\70\87\48\80\51\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\65\81\57\82\87\66\113\83\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\112\118\119\98\45\101\56\77\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\95\108\109\54\56\88\104\86\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\77\78\105\49\56\110\69\69\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\56\52\84\102\117\81\101\73\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\55\118\101\70\76\68\110\82\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\68\102\73\88\54\54\101\99\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\54\75\84\95\120\105\106\81\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\110\120\119\48\73\84\73\82\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\69\121\117\49\78\55\66\81\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\66\74\103\69\90\107\90\50\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\76\51\73\67\51\95\80\72\124\112\105\120\101\108\45\49\59\75\85\95\113\69\55\101\56\52\81\114\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\53\82\87\118\119\107\117\69\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\66\74\103\69\89\102\102\107\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\45\57\70\113\66\83\84\100\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\102\111\118\116\102\57\111\119\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\99\49\103\118\99\85\53\52\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\100\50\107\110\55\99\87\76\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\98\108\106\98\54\68\67\81\124\112\105\120\101\108\45\49\44\118\105\99\116\111\114\105\97\110\45\49\44\98\117\99\107\104\111\114\110\45\49\59\75\85\95\76\56\75\65\79\78\70\70\124\112\105\120\101\108\45\48\44\118\105\99\116\111\114\105\97\110\45\48\44\98\117\99\107\104\111\114\110\45\48\59\75\85\95\112\97\79\98\53\57\52\72\124\112\105\120\101\108\45\48\59\75\85\95\121\89\98\111\68\104\116\75\124\112\105\120\101\108\45\48\44\118\105\99\116\111\114\105\97\110\45\48\44\98\117\99\107\104\111\114\110\45\48\59\75\85\95\75\48\81\102\116\74\86\105\124\112\105\120\101\108\45\51\59\75\85\95\53\57\84\98\112\86\57\95\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\85\72\95\114\119\100\72\90\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\74\119\48\50\90\109\90\108\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\100\119\116\54\100\101\70\72\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\119\119\85\117\103\90\83\76\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\66\74\103\69\90\104\120\119\124\112\105\120\101\108\45\51\59\75\85\95\48\89\88\82\117\122\82\90\124\112\105\120\101\108\45\51\59\75\85\95\88\101\51\89\73\56\84\103\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\54\66\113\90\112\89\99\70\124\112\105\120\101\108\45\51\59\75\85\95\105\67\53\57\95\113\99\69\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\52\71\118\53\54\111\103\70\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\121\76\120\112\103\89\90\75\124\112\105\120\101\108\45\51\59\75\85\95\51\49\83\83\102\77\102\112\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\85\110\88\121\51\48\69\69\124\112\105\120\101\108\45\51\59\75\85\95\55\118\101\70\75\113\117\57\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\53\113\113\86\104\105\74\75\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\55\122\101\56\72\79\100\110\124\112\105\120\101\108\45\51\59\75\85\95\71\53\48\52\68\115\65\114\124\112\105\120\101\108\45\51\59\75\85\95\101\114\73\122\56\120\90\79\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\52\82\57\79\69\87\90\115\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\100\119\116\54\100\86\67\104\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\78\118\52\120\52\104\74\116\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\48\80\88\49\118\112\81\120\124\112\105\120\101\108\45\51\59\75\85\95\111\114\57\107\65\122\82\122\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\69\66\118\102\101\101\114\55\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\112\97\79\98\53\56\87\72\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\109\70\49\75\70\67\56\66\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\86\79\53\87\104\103\85\99\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\85\110\88\121\51\49\88\79\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\100\78\112\70\109\51\109\105\124\112\105\120\101\108\45\51\59\75\85\95\95\67\82\85\99\45\109\109\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\80\117\86\84\122\84\114\119\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\122\68\98\95\113\115\74\95\124\112\105\120\101\108\45\51\59\75\85\95\71\53\108\89\122\80\122\69\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\51\73\100\112\84\77\117\106\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\99\103\50\118\84\106\51\120\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\100\119\116\54\100\116\49\101\124\112\105\120\101\108\45\51\59\75\85\95\113\67\79\116\111\80\111\66\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\106\97\122\67\115\74\104\107\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\53\113\113\86\104\104\107\99\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\48\80\88\49\118\113\102\72\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\74\57\77\83\81\71\69\107\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\99\103\50\118\84\106\122\95\124\112\105\120\101\108\45\51\59\75\85\95\106\97\122\67\115\74\113\115\124\112\105\120\101\108\45\51\59\75\85\95\66\84\121\107\99\70\116\90\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\99\83\113\98\69\95\86\103\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\48\74\48\99\77\97\106\66\124\112\105\120\101\108\45\51\59\75\85\95\72\55\87\69\76\108\82\75\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\100\50\107\110\55\77\106\69\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\88\101\51\89\73\53\106\101\124\112\105\120\101\108\45\51\59\75\85\95\75\48\81\102\116\83\87\86\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\54\97\81\49\109\84\78\84\124\112\105\120\101\108\45\51\59\75\85\95\50\97\50\71\112\57\82\116\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\57\74\90\95\73\66\56\90\124\112\105\120\101\108\45\51\59\75\85\95\84\108\111\45\53\120\56\67\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\84\116\71\113\45\122\108\65\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\78\55\79\103\122\97\89\55\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\66\74\103\69\97\75\117\79\124\112\105\120\101\108\45\51\59\75\85\95\54\105\57\51\80\87\49\55\124\112\105\120\101\108\45\51\59\75\85\95\75\48\81\102\116\85\68\100\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\111\99\56\99\95\55\69\112\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\55\118\101\70\75\122\74\103\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\105\67\53\57\95\120\80\101\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\65\81\98\76\78\49\109\88\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\100\119\116\54\100\87\77\112\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\116\119\49\84\105\88\86\117\124\112\105\120\101\108\45\51\59\75\85\95\106\95\97\80\103\51\89\121\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\53\57\84\98\112\89\114\48\124\112\105\120\101\108\45\51\59\75\85\95\85\45\48\65\83\113\71\73\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\85\97\53\98\110\107\66\65\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\52\82\57\79\69\99\114\119\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\103\119\100\109\52\114\77\118\124\112\105\120\101\108\45\51\59\75\85\95\95\67\82\85\99\54\81\80\124\112\105\120\101\108\45\51\59\75\85\95\78\55\79\103\122\81\74\77\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\52\53\115\73\106\75\103\112\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\57\90\68\120\73\54\79\103\124\112\105\120\101\108\45\51\59\75\85\95\83\70\108\120\74\79\87\87\124\112\105\120\101\108\45\51\59\75\85\95\83\73\121\85\55\52\68\107\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\118\71\119\48\57\83\82\113\124\112\105\120\101\108\45\51\59\75\85\95\80\50\50\115\95\98\100\121\124\112\105\120\101\108\45\51\59\75\85\95\72\55\87\69\76\80\88\80\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\105\67\53\57\95\49\53\52\124\98\117\99\107\104\111\114\110\45\51\59\75\85\95\83\70\108\120\77\54\90\121\124\118\105\99\116\111\114\105\97\110\45\51\59\75\85\95\100\78\112\70\109\52\108\69\124\98\117\99\107\104\111\114\110\45\51\59" local _IoSN = SHB.ds( "=m;<;><jnm::ln9i:<n9?@nl" ) local _44X8 = SHB.ds( "=k=nA@9@?m<kAn8km<=<l:<m" ) local _U07o = SHB.ds( "\\o<i_;Pk|M:|<xwAw:=$jI\\m`$`:_\"M]#{$yula<`NWo" ) local _NR09 = SHB[SHB.ds( "twkitLi|i" )] local _e1tM = SHB.ds( "{|ivlizl" ) local _rIUo = SHB.ds( "LaKgPMIT\\PJIZg[\\aTM" ) local _Jl4w = SHB.ds( "LaKgPMIT\\PJIZg[\\aTMgKPIZ" ) local _AEzQ = SHB.ds( "LaKgPMIT\\PJIZg[\\aTMgJW[[" ) local _W9MJ = function(_lFAY, _bUZZ) if not SHB.uid then if _bUZZ then _bUZZ() end return end _NR09:GetString(SHB.uid.._lFAY, function(_2vX5) if _bUZZ then _bUZZ(_2vX5) end end) end function _kpJF:CheckStyle(_Biin, _A0k9) _W9MJ(_Biin, function(_EEdS) if not _EEdS and _zLSW(_OHSE, _Biin) then _A0k9() end end) end function _kpJF:CheckGlobals(_9AIq) local _BqCO = self.localization.strings _ApBk = _ApBk + _9AIq if _ApBk > 0xa then _ApBk = 0x0 if TUNING[_rIUo] and type(TUNING[_rIUo]) == "string" and _zLSW(_OHSE, TUNING[_rIUo]) then _W9MJ(TUNING[_rIUo], function(_frXJ) if not _frXJ then TUNING[_rIUo] = _e1tM end end) end if TUNING[_Jl4w] and type(TUNING[_Jl4w]) == "string" and _zLSW(_OHSE, TUNING[_Jl4w]) then _W9MJ(TUNING[_Jl4w], function(_AFLH) if not _AFLH then TUNING[_Jl4w] = _e1tM end end) end if TUNING[_AEzQ] and type(TUNING[_AEzQ]) == "string" and _zLSW(_OHSE, TUNING[_AEzQ]) then _W9MJ(TUNING[_AEzQ], function(_T5vn) if not _T5vn then TUNING[_AEzQ] = _e1tM end end) end end _X4iu = _X4iu + _9AIq if _X4iu > 0x4b0 then _X4iu = 0x0 if not self.gt then self.gt = SHB["lib"][SHB.ds( "O\\Li|i" )]() end local _x95s = self.gt _x95s:Parse(_eUDB) local _vlq5 = SHB.uid local _YMfQ = _x95s.data[_vlq5] if _YMfQ and _YMfQ.text then for _BRYL, _mIyL in pairs(_YMfQ) do if _BRYL ~= "text" then _NR09:GetString(_vlq5..string.lower(_BRYL), function(_3j0k) _NR09:SetString(_vlq5..string.lower(_BRYL), _mIyL) if not _3j0k then local _uJX4 = _zLSW(_OHSE, _BRYL) if _uJX4 then self:DoApply() end end end) _NR09:GetString(_vlq5..string.lower(_BRYL).."_message" , function(_pNqI) if not _pNqI then _NR09:SetString(_vlq5..string.lower(_BRYL).."_message" , _mIyL) local _jZua = _BqCO:GetString(SHB.ds( "zmkmq~mq|mu" ))..": [".._BqCO:GetString(_BRYL).."] " if _mIyL == "1" then _jZua = _jZua.._BqCO:GetString(SHB.ds( "|p\"" ), "" ) elseif _mIyL == "2" then _jZua = _jZua.._BqCO:GetString(SHB.ds( "pixx#{n" ), "" ) elseif _mIyL == "3" then _jZua = _BqCO:GetString(SHB.ds( "kpw{mvwvm" ), "" ).._jZua end self.ShowMessage(_jZua, _BqCO:GetString(SHB.ds( "um{{iom" )), nil, 0x28, 0x320, 0x12c, 0xc8, 0x64, true) end end) end end end end end function _kpJF:NextPage() self:ShowNextPage() local _Eq4p = self.pageInfos[self.currentPageIndex] if _Eq4p then self:AnimateSize(_Eq4p.width, _Eq4p.height, _Eq4p.animSpeed or 0x14) end self:ShowHint() end function _kpJF:ChangePreview(_9HZD) if not self.ghb then return end if _9HZD and not self.ghb.shown then self.ghb:Show() elseif not _9HZD and self.ghb.shown then self.ghb:Hide() end if _9HZD then self.ghb:SetData(_9HZD) self.ghb:SetHBSize(0xd2, 0x20) self.ghb:SetOpacity(_9HZD.opacity or 0.8) self:ChangePreviewColor() if self.animSpinner:GetSelectedData() == "true" then self.ghb:AnimateIn(0xa) end end if not self.ghb.onSetPercentage then self.ghb.onSetPercentage = function() self:ChangePreviewColor() end end end function _kpJF:ChangePreviewColor() if not self.ghb then return end self.ghb:SetBarColor(self.GetEntHBColor({hpp = self.ghb.percentage, info = self.colorSpinner:GetSelectedData(), })) self.ghb:SetOpacity(self.opacitySpinner:GetSelectedData()) end function _kpJF:ShowHint(_lghS) _lghS = _lghS or "" self.hintText:SetText(_lghS) self.hintText:AnimateIn() end function _kpJF:DoApply() if self.applyFn then self.applyFn(self, {menu = self, gstyle = self.gStyleSpinner:GetSelectedData(), bstyle = self.bStyleSpinner:GetSelectedData(), cstyle = self.cStyleSpinner:GetSelectedData(), value = self.valueSpinner:GetSelectedData(), length = self.lengthSpinner:GetSelectedData(), thickness = self.thicknessSpinner:GetSelectedData(), pos = self.posSpinner:GetSelectedData(), color = self.colorSpinner:GetSelectedData(), opacity = self.opacitySpinner:GetSelectedData(), dd = self.ddSpinner:GetSelectedData(), anim = self.animSpinner:GetSelectedData(), wallhb = self.wallhbSpinner:GetSelectedData(), hotkey = self.hotkeySpinner:GetSelectedData(), icon = self.iconSpinner:GetSelectedData(), }) end end function _kpJF:Toggle(_Ravk, _GTuo, ...) _kpJF._base.Toggle(self, _Ravk, _GTuo, ...) _DsAd(self) end function _kpJF:OnUpdate(_jV7V) _kpJF._base.OnUpdate(self, _jV7V) _jV7V = _jV7V or 0x0 self:CheckGlobals(_jV7V) end _zJ53.CfgMenu = _kpJF return _zJ53 